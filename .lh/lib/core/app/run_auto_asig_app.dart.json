{
    "sourceFile": "lib/core/app/run_auto_asig_app.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1728312843803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728312900257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n     } else {\n       FirebaseCrashlytics.instance.recordFlutterError(errorDetails);\n     }\n   };\n+  \n   PlatformDispatcher.instance.onError = (error, stack) {\n     if (fatalError) {\n       FirebaseCrashlytics.instance.recordError(error, stack, fatal: true);\n     } else {\n"
                },
                {
                    "date": 1728312907467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   db = FirebaseFirestore.instance;\n \n   userCollection = FirebaseFirestore.instance.collection('users');\n   appDataCollection = FirebaseFirestore.instance.collection('app_data');\n-  vehicleCollection = FirebaseFirestore.instance.collection('vehicles');\n+  // vehicleCollection = FirebaseFirestore.instance.collection('vehicles');\n \n   // messaging = FirebaseMessaging.instance;\n \n   // await initNotification();\n"
                },
                {
                    "date": 1728312969548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     } else {\n       FirebaseCrashlytics.instance.recordFlutterError(errorDetails);\n     }\n   };\n-  \n+\n   PlatformDispatcher.instance.onError = (error, stack) {\n     if (fatalError) {\n       FirebaseCrashlytics.instance.recordError(error, stack, fatal: true);\n     } else {\n"
                },
                {
                    "date": 1731247745193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,19 +23,21 @@\n   const fatalError = true;\r\n   FlutterError.onError = (errorDetails) {\r\n     if (fatalError) {\r\n       FirebaseCrashlytics.instance.recordFlutterFatalError(errorDetails);\r\n-    } else {\r\n-      FirebaseCrashlytics.instance.recordFlutterError(errorDetails);\r\n-    }\r\n+    } \r\n+    // else {\r\n+    //   FirebaseCrashlytics.instance.recordFlutterError(errorDetails);\r\n+    // }\r\n   };\r\n \r\n   PlatformDispatcher.instance.onError = (error, stack) {\r\n     if (fatalError) {\r\n       FirebaseCrashlytics.instance.recordError(error, stack, fatal: true);\r\n-    } else {\r\n-      FirebaseCrashlytics.instance.recordError(error, stack);\r\n     }\r\n+    //  else {\r\n+    //   FirebaseCrashlytics.instance.recordError(error, stack);\r\n+    // }\r\n     return true;\r\n   };\r\n \r\n   db = FirebaseFirestore.instance;\r\n"
                },
                {
                    "date": 1731247869088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,170 +1,170 @@\n-import 'dart:async';\n-import 'package:auto_asig/core/app/app_data.dart';\n-import 'package:auto_asig/core/app/auto-asig.dart';\n-import 'package:auto_asig/core/dependency_injection/dependencies_provider.dart';\n-import 'package:auto_asig/firebase_options.dart';\n-import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:firebase_core/firebase_core.dart';\n-import 'package:firebase_crashlytics/firebase_crashlytics.dart';\n-import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/services.dart';\n-import 'package:sentry_flutter/sentry_flutter.dart';\n-\n-Future<void> runAutoAsigApp() async {\n-  WidgetsFlutterBinding.ensureInitialized();\n-  _lockOrientation();\n-  _setSystemOverlayStyle();\n-\n-  await Firebase.initializeApp(\n-    options: DefaultFirebaseOptions.currentPlatform,\n-  );\n-\n-  const fatalError = true;\n-  FlutterError.onError = (errorDetails) {\n-    if (fatalError) {\n-      FirebaseCrashlytics.instance.recordFlutterFatalError(errorDetails);\n-    } \r\n+import 'dart:async';\r\n+import 'package:auto_asig/core/app/app_data.dart';\r\n+import 'package:auto_asig/core/app/auto-asig.dart';\r\n+import 'package:auto_asig/core/dependency_injection/dependencies_provider.dart';\r\n+import 'package:auto_asig/firebase_options.dart';\r\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:firebase_core/firebase_core.dart';\r\n+import 'package:firebase_crashlytics/firebase_crashlytics.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:sentry_flutter/sentry_flutter.dart';\r\n+\r\n+Future<void> runAutoAsigApp() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+  _lockOrientation();\r\n+  _setSystemOverlayStyle();\r\n+\r\n+  await Firebase.initializeApp(\r\n+    options: DefaultFirebaseOptions.currentPlatform,\r\n+  );\r\n+\r\n+  const fatalError = true;\r\n+  FlutterError.onError = (errorDetails) {\r\n+    if (fatalError) {\r\n+      FirebaseCrashlytics.instance.recordFlutterFatalError(errorDetails);\r\n+    }\r\n     // else {\r\n     //   FirebaseCrashlytics.instance.recordFlutterError(errorDetails);\r\n     // }\r\n-  };\n-\n-  PlatformDispatcher.instance.onError = (error, stack) {\n-    if (fatalError) {\n-      FirebaseCrashlytics.instance.recordError(error, stack, fatal: true);\n-    }\n+  };\r\n+\r\n+  PlatformDispatcher.instance.onError = (error, stack) {\r\n+    if (fatalError) {\r\n+      FirebaseCrashlytics.instance.recordError(error, stack, fatal: true);\r\n+    }\r\n     //  else {\r\n     //   FirebaseCrashlytics.instance.recordError(error, stack);\r\n     // }\r\n-    return true;\n-  };\n-\n-  db = FirebaseFirestore.instance;\n-\n-  userCollection = FirebaseFirestore.instance.collection('users');\n-  appDataCollection = FirebaseFirestore.instance.collection('app_data');\n-  // vehicleCollection = FirebaseFirestore.instance.collection('vehicles');\n-\n-  // messaging = FirebaseMessaging.instance;\n-\n-  // await initNotification();\n-\n-  await SentryFlutter.init(\n-    (options) {\n-      options.dsn =\n-          'https://94199d009d562d6ba64c8c136991fbc8@o4505488006512640.ingest.us.sentry.io/4508052539179008';\n-      options.tracesSampleRate = 1.0;\n-    },\n-    appRunner: () => runApp(\n-      const DependenciesProvider(\n-        child: AutoAsig(),\n-      ),\n-    ),\n-  );\n-}\n-\n-void _lockOrientation() {\n-  SystemChrome.setPreferredOrientations(\n-    <DeviceOrientation>[DeviceOrientation.portraitUp],\n-  );\n-}\n-\n-void _setSystemOverlayStyle() {\n-  SystemChrome.setSystemUIOverlayStyle(\n-    const SystemUiOverlayStyle(\n-      statusBarColor: Colors.transparent,\n-      statusBarIconBrightness: Brightness.dark,\n-      statusBarBrightness: Brightness.light,\n-      systemNavigationBarColor: Colors.white,\n-      systemNavigationBarIconBrightness: Brightness.dark,\n-    ),\n-  );\n-}\n-\n-// // Initialize the FlutterLocalNotificationsPlugin\n-// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\n-//     FlutterLocalNotificationsPlugin();\n-\n-// Future<void> initNotification() async {\n-//   // Initialize local notifications\n-//   const AndroidInitializationSettings initializationSettingsAndroid =\n-//       AndroidInitializationSettings('@mipmap/launcher_icon');\n-\n-//   const InitializationSettings initializationSettings = InitializationSettings(\n-//     android: initializationSettingsAndroid,\n-//   );\n-\n-//   await flutterLocalNotificationsPlugin.initialize(initializationSettings);\n-\n-//   // if (Platform.isIOS) {\n-//   //   // Request permission for iOS devices\n-//   //   await messaging!.requestPermission();\n-//   // }\n-\n-//   // // Get the FCM token (works for both iOS and Android)\n-//   // fCMToken = await messaging!.getToken();\n-\n-//   // print('FCM Token: $fCMToken');\n-\n-//   // // Subscribe the device to the 'messages' topic\n-//   // await FirebaseMessaging.instance.subscribeToTopic('messages').then((_) {\n-//   //   print('Subscribed to topic: messages');\n-//   // });\n-\n-//   // // Handle foreground messages\n-//   // FirebaseMessaging.onMessage.listen((RemoteMessage message) {\n-//   //   // Extract the senderId from the data payload\n-//   //   String senderId = message.data['senderId'] ?? '';\n-//   //   // Check if the message sender is not the current user\n-//   //   if (currentUserId.isNotEmpty && senderId != currentUserId) {\n-//   //     // Only show the notification if the message sender is not the current user\n-//   //     _showNotification(\n-//   //       message.notification!.title,\n-//   //       message.notification!.body,\n-//   //     );\n-//   //   } else {\n-//   //     print('Message from self, no notification displayed.');\n-//   //   }\n-//   // });\n-\n-//   initPushNotifications();\n-// }\n-\n-// Future<void> initPushNotifications() async {\n-//   await FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(\n-//     alert: true,\n-//     badge: true,\n-//     sound: true,\n-//   );\n-\n-//   FirebaseMessaging.onBackgroundMessage(handleBackgroundMessage);\n-// }\n-\n-// Function to display local notifications when the app is in the foreground\n-// Future<void> _showNotification(String? title, String? body) async {\n-//   const AndroidNotificationDetails androidPlatformChannelSpecifics =\n-//       AndroidNotificationDetails(\n-//     'high_importance_channel', // ID of the notification channel\n-//     'High Importance Notifications', // Name of the notification channel\n-//     importance: Importance.max,\n-//     priority: Priority.high,\n-//   );\n-\n-//   const NotificationDetails platformChannelSpecifics = NotificationDetails(\n-//     android: androidPlatformChannelSpecifics,\n-//   );\n-\n-//   await flutterLocalNotificationsPlugin.show(\n-//     0, // Notification ID\n-//     title, // Notification Title\n-//     body, // Notification Body\n-//     platformChannelSpecifics,\n-//   );\n-// }\n-\n-// Future<void> handleBackgroundMessage(RemoteMessage message) async {\n-//   print('Title: ${message.notification!.title}');\n-//   print('Body: ${message.notification!.body}');\n-//   print('Payload: ${message.data}');\n-// }\n+    return true;\r\n+  };\r\n+\r\n+  db = FirebaseFirestore.instance;\r\n+\r\n+  userCollection = FirebaseFirestore.instance.collection('users');\r\n+  appDataCollection = FirebaseFirestore.instance.collection('app_data');\r\n+  // vehicleCollection = FirebaseFirestore.instance.collection('vehicles');\r\n+\r\n+  // messaging = FirebaseMessaging.instance;\r\n+\r\n+  // await initNotification();\r\n+\r\n+  await SentryFlutter.init(\r\n+    (options) {\r\n+      options.dsn =\r\n+          'https://94199d009d562d6ba64c8c136991fbc8@o4505488006512640.ingest.us.sentry.io/4508052539179008';\r\n+      options.tracesSampleRate = 1.0;\r\n+    },\r\n+    appRunner: () => runApp(\r\n+      const DependenciesProvider(\r\n+        child: AutoAsig(),\r\n+      ),\r\n+    ),\r\n+  );\r\n+}\r\n+\r\n+void _lockOrientation() {\r\n+  SystemChrome.setPreferredOrientations(\r\n+    <DeviceOrientation>[DeviceOrientation.portraitUp],\r\n+  );\r\n+}\r\n+\r\n+void _setSystemOverlayStyle() {\r\n+  SystemChrome.setSystemUIOverlayStyle(\r\n+    const SystemUiOverlayStyle(\r\n+      statusBarColor: Colors.transparent,\r\n+      statusBarIconBrightness: Brightness.dark,\r\n+      statusBarBrightness: Brightness.light,\r\n+      systemNavigationBarColor: Colors.white,\r\n+      systemNavigationBarIconBrightness: Brightness.dark,\r\n+    ),\r\n+  );\r\n+}\r\n+\r\n+// // Initialize the FlutterLocalNotificationsPlugin\r\n+// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+//     FlutterLocalNotificationsPlugin();\r\n+\r\n+// Future<void> initNotification() async {\r\n+//   // Initialize local notifications\r\n+//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n+//       AndroidInitializationSettings('@mipmap/launcher_icon');\r\n+\r\n+//   const InitializationSettings initializationSettings = InitializationSettings(\r\n+//     android: initializationSettingsAndroid,\r\n+//   );\r\n+\r\n+//   await flutterLocalNotificationsPlugin.initialize(initializationSettings);\r\n+\r\n+//   // if (Platform.isIOS) {\r\n+//   //   // Request permission for iOS devices\r\n+//   //   await messaging!.requestPermission();\r\n+//   // }\r\n+\r\n+//   // // Get the FCM token (works for both iOS and Android)\r\n+//   // fCMToken = await messaging!.getToken();\r\n+\r\n+//   // print('FCM Token: $fCMToken');\r\n+\r\n+//   // // Subscribe the device to the 'messages' topic\r\n+//   // await FirebaseMessaging.instance.subscribeToTopic('messages').then((_) {\r\n+//   //   print('Subscribed to topic: messages');\r\n+//   // });\r\n+\r\n+//   // // Handle foreground messages\r\n+//   // FirebaseMessaging.onMessage.listen((RemoteMessage message) {\r\n+//   //   // Extract the senderId from the data payload\r\n+//   //   String senderId = message.data['senderId'] ?? '';\r\n+//   //   // Check if the message sender is not the current user\r\n+//   //   if (currentUserId.isNotEmpty && senderId != currentUserId) {\r\n+//   //     // Only show the notification if the message sender is not the current user\r\n+//   //     _showNotification(\r\n+//   //       message.notification!.title,\r\n+//   //       message.notification!.body,\r\n+//   //     );\r\n+//   //   } else {\r\n+//   //     print('Message from self, no notification displayed.');\r\n+//   //   }\r\n+//   // });\r\n+\r\n+//   initPushNotifications();\r\n+// }\r\n+\r\n+// Future<void> initPushNotifications() async {\r\n+//   await FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(\r\n+//     alert: true,\r\n+//     badge: true,\r\n+//     sound: true,\r\n+//   );\r\n+\r\n+//   FirebaseMessaging.onBackgroundMessage(handleBackgroundMessage);\r\n+// }\r\n+\r\n+// Function to display local notifications when the app is in the foreground\r\n+// Future<void> _showNotification(String? title, String? body) async {\r\n+//   const AndroidNotificationDetails androidPlatformChannelSpecifics =\r\n+//       AndroidNotificationDetails(\r\n+//     'high_importance_channel', // ID of the notification channel\r\n+//     'High Importance Notifications', // Name of the notification channel\r\n+//     importance: Importance.max,\r\n+//     priority: Priority.high,\r\n+//   );\r\n+\r\n+//   const NotificationDetails platformChannelSpecifics = NotificationDetails(\r\n+//     android: androidPlatformChannelSpecifics,\r\n+//   );\r\n+\r\n+//   await flutterLocalNotificationsPlugin.show(\r\n+//     0, // Notification ID\r\n+//     title, // Notification Title\r\n+//     body, // Notification Body\r\n+//     platformChannelSpecifics,\r\n+//   );\r\n+// }\r\n+\r\n+// Future<void> handleBackgroundMessage(RemoteMessage message) async {\r\n+//   print('Title: ${message.notification!.title}');\r\n+//   print('Body: ${message.notification!.body}');\r\n+//   print('Payload: ${message.data}');\r\n+// }\r\n"
                },
                {
                    "date": 1732808122146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,170 +1,176 @@\n-import 'dart:async';\r\n-import 'package:auto_asig/core/app/app_data.dart';\r\n-import 'package:auto_asig/core/app/auto-asig.dart';\r\n-import 'package:auto_asig/core/dependency_injection/dependencies_provider.dart';\r\n-import 'package:auto_asig/firebase_options.dart';\r\n-import 'package:cloud_firestore/cloud_firestore.dart';\r\n-import 'package:firebase_core/firebase_core.dart';\r\n-import 'package:firebase_crashlytics/firebase_crashlytics.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:sentry_flutter/sentry_flutter.dart';\r\n-\r\n-Future<void> runAutoAsigApp() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-  _lockOrientation();\r\n-  _setSystemOverlayStyle();\r\n-\r\n-  await Firebase.initializeApp(\r\n-    options: DefaultFirebaseOptions.currentPlatform,\r\n-  );\r\n-\r\n-  const fatalError = true;\r\n-  FlutterError.onError = (errorDetails) {\r\n-    if (fatalError) {\r\n-      FirebaseCrashlytics.instance.recordFlutterFatalError(errorDetails);\r\n-    }\r\n-    // else {\r\n-    //   FirebaseCrashlytics.instance.recordFlutterError(errorDetails);\r\n-    // }\r\n-  };\r\n-\r\n-  PlatformDispatcher.instance.onError = (error, stack) {\r\n-    if (fatalError) {\r\n-      FirebaseCrashlytics.instance.recordError(error, stack, fatal: true);\r\n-    }\r\n-    //  else {\r\n-    //   FirebaseCrashlytics.instance.recordError(error, stack);\r\n-    // }\r\n-    return true;\r\n-  };\r\n-\r\n-  db = FirebaseFirestore.instance;\r\n-\r\n-  userCollection = FirebaseFirestore.instance.collection('users');\r\n-  appDataCollection = FirebaseFirestore.instance.collection('app_data');\r\n-  // vehicleCollection = FirebaseFirestore.instance.collection('vehicles');\r\n-\r\n-  // messaging = FirebaseMessaging.instance;\r\n-\r\n-  // await initNotification();\r\n-\r\n-  await SentryFlutter.init(\r\n-    (options) {\r\n-      options.dsn =\r\n-          'https://94199d009d562d6ba64c8c136991fbc8@o4505488006512640.ingest.us.sentry.io/4508052539179008';\r\n-      options.tracesSampleRate = 1.0;\r\n-    },\r\n-    appRunner: () => runApp(\r\n-      const DependenciesProvider(\r\n-        child: AutoAsig(),\r\n-      ),\r\n-    ),\r\n-  );\r\n-}\r\n-\r\n-void _lockOrientation() {\r\n-  SystemChrome.setPreferredOrientations(\r\n-    <DeviceOrientation>[DeviceOrientation.portraitUp],\r\n-  );\r\n-}\r\n-\r\n-void _setSystemOverlayStyle() {\r\n-  SystemChrome.setSystemUIOverlayStyle(\r\n-    const SystemUiOverlayStyle(\r\n-      statusBarColor: Colors.transparent,\r\n-      statusBarIconBrightness: Brightness.dark,\r\n-      statusBarBrightness: Brightness.light,\r\n-      systemNavigationBarColor: Colors.white,\r\n-      systemNavigationBarIconBrightness: Brightness.dark,\r\n-    ),\r\n-  );\r\n-}\r\n-\r\n-// // Initialize the FlutterLocalNotificationsPlugin\r\n-// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-//     FlutterLocalNotificationsPlugin();\r\n-\r\n-// Future<void> initNotification() async {\r\n-//   // Initialize local notifications\r\n-//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n-//       AndroidInitializationSettings('@mipmap/launcher_icon');\r\n-\r\n-//   const InitializationSettings initializationSettings = InitializationSettings(\r\n-//     android: initializationSettingsAndroid,\r\n-//   );\r\n-\r\n-//   await flutterLocalNotificationsPlugin.initialize(initializationSettings);\r\n-\r\n-//   // if (Platform.isIOS) {\r\n-//   //   // Request permission for iOS devices\r\n-//   //   await messaging!.requestPermission();\r\n-//   // }\r\n-\r\n-//   // // Get the FCM token (works for both iOS and Android)\r\n-//   // fCMToken = await messaging!.getToken();\r\n-\r\n-//   // print('FCM Token: $fCMToken');\r\n-\r\n-//   // // Subscribe the device to the 'messages' topic\r\n-//   // await FirebaseMessaging.instance.subscribeToTopic('messages').then((_) {\r\n-//   //   print('Subscribed to topic: messages');\r\n-//   // });\r\n-\r\n-//   // // Handle foreground messages\r\n-//   // FirebaseMessaging.onMessage.listen((RemoteMessage message) {\r\n-//   //   // Extract the senderId from the data payload\r\n-//   //   String senderId = message.data['senderId'] ?? '';\r\n-//   //   // Check if the message sender is not the current user\r\n-//   //   if (currentUserId.isNotEmpty && senderId != currentUserId) {\r\n-//   //     // Only show the notification if the message sender is not the current user\r\n-//   //     _showNotification(\r\n-//   //       message.notification!.title,\r\n-//   //       message.notification!.body,\r\n-//   //     );\r\n-//   //   } else {\r\n-//   //     print('Message from self, no notification displayed.');\r\n-//   //   }\r\n-//   // });\r\n-\r\n-//   initPushNotifications();\r\n-// }\r\n-\r\n-// Future<void> initPushNotifications() async {\r\n-//   await FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(\r\n-//     alert: true,\r\n-//     badge: true,\r\n-//     sound: true,\r\n-//   );\r\n-\r\n-//   FirebaseMessaging.onBackgroundMessage(handleBackgroundMessage);\r\n-// }\r\n-\r\n-// Function to display local notifications when the app is in the foreground\r\n-// Future<void> _showNotification(String? title, String? body) async {\r\n-//   const AndroidNotificationDetails androidPlatformChannelSpecifics =\r\n-//       AndroidNotificationDetails(\r\n-//     'high_importance_channel', // ID of the notification channel\r\n-//     'High Importance Notifications', // Name of the notification channel\r\n-//     importance: Importance.max,\r\n-//     priority: Priority.high,\r\n-//   );\r\n-\r\n-//   const NotificationDetails platformChannelSpecifics = NotificationDetails(\r\n-//     android: androidPlatformChannelSpecifics,\r\n-//   );\r\n-\r\n-//   await flutterLocalNotificationsPlugin.show(\r\n-//     0, // Notification ID\r\n-//     title, // Notification Title\r\n-//     body, // Notification Body\r\n-//     platformChannelSpecifics,\r\n-//   );\r\n-// }\r\n-\r\n-// Future<void> handleBackgroundMessage(RemoteMessage message) async {\r\n-//   print('Title: ${message.notification!.title}');\r\n-//   print('Body: ${message.notification!.body}');\r\n-//   print('Payload: ${message.data}');\r\n-// }\r\n+import 'dart:async';\n+import 'package:auto_asig/core/app/app_data.dart';\n+import 'package:auto_asig/core/app/auto-asig.dart';\n+import 'package:auto_asig/core/dependency_injection/dependencies_provider.dart';\n+import 'package:auto_asig/core/helpers/notification_helper.dart';\n+import 'package:auto_asig/firebase_options.dart';\n+import 'package:cloud_firestore/cloud_firestore.dart';\n+import 'package:firebase_core/firebase_core.dart';\n+import 'package:firebase_crashlytics/firebase_crashlytics.dart';\n+import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/services.dart';\n+import 'package:flutter_secure_storage/flutter_secure_storage.dart';\n+import 'package:sentry_flutter/sentry_flutter.dart';\n+\n+Future<void> runAutoAsigApp() async {\n+  WidgetsFlutterBinding.ensureInitialized();\n+  _lockOrientation();\n+  _setSystemOverlayStyle();\n+\n+  await Firebase.initializeApp(\n+    options: DefaultFirebaseOptions.currentPlatform,\n+  );\n+\n+  // Initialize notifications\n+  await NotificationHelper.initialize();\n+\n+  const fatalError = true;\n+  FlutterError.onError = (errorDetails) {\n+    if (fatalError) {\n+      FirebaseCrashlytics.instance.recordFlutterFatalError(errorDetails);\n+    }\n+    // else {\n+    //   FirebaseCrashlytics.instance.recordFlutterError(errorDetails);\n+    // }\n+  };\n+\n+  PlatformDispatcher.instance.onError = (error, stack) {\n+    if (fatalError) {\n+      FirebaseCrashlytics.instance.recordError(error, stack, fatal: true);\n+    }\n+    //  else {\n+    //   FirebaseCrashlytics.instance.recordError(error, stack);\n+    // }\n+    return true;\n+  };\n+\n+  db = FirebaseFirestore.instance;\n+\n+  userCollection = FirebaseFirestore.instance.collection('users');\n+  appDataCollection = FirebaseFirestore.instance.collection('app_data');\n+  secureStorage = const FlutterSecureStorage();\n+  // vehicleCollection = FirebaseFirestore.instance.collection('vehicles');\n+\n+  // messaging = FirebaseMessaging.instance;\n+\n+  // await initNotification();\n+\n+  await SentryFlutter.init(\n+    (options) {\n+      options.dsn =\n+          'https://94199d009d562d6ba64c8c136991fbc8@o4505488006512640.ingest.us.sentry.io/4508052539179008';\n+      options.tracesSampleRate = 1.0;\n+    },\n+    appRunner: () => runApp(\n+      const DependenciesProvider(\n+        child: AutoAsig(),\n+      ),\n+    ),\n+  );\n+}\n+\n+void _lockOrientation() {\n+  SystemChrome.setPreferredOrientations(\n+    <DeviceOrientation>[DeviceOrientation.portraitUp],\n+  );\n+}\n+\n+void _setSystemOverlayStyle() {\n+  SystemChrome.setSystemUIOverlayStyle(\n+    const SystemUiOverlayStyle(\n+      statusBarColor: Colors.transparent,\n+      statusBarIconBrightness: Brightness.dark,\n+      statusBarBrightness: Brightness.light,\n+      systemNavigationBarColor: Colors.white,\n+      systemNavigationBarIconBrightness: Brightness.dark,\n+    ),\n+  );\n+}\n+\n+// // Initialize the FlutterLocalNotificationsPlugin\n+// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\n+//     FlutterLocalNotificationsPlugin();\n+\n+// Future<void> initNotification() async {\n+//   // Initialize local notifications\n+//   const AndroidInitializationSettings initializationSettingsAndroid =\n+//       AndroidInitializationSettings('@mipmap/launcher_icon');\n+\n+//   const InitializationSettings initializationSettings = InitializationSettings(\n+//     android: initializationSettingsAndroid,\n+//   );\n+\n+//   await flutterLocalNotificationsPlugin.initialize(initializationSettings);\n+\n+//   // if (Platform.isIOS) {\n+//   //   // Request permission for iOS devices\n+//   //   await messaging!.requestPermission();\n+//   // }\n+\n+//   // // Get the FCM token (works for both iOS and Android)\n+//   // fCMToken = await messaging!.getToken();\n+\n+//   // print('FCM Token: $fCMToken');\n+\n+//   // // Subscribe the device to the 'messages' topic\n+//   // await FirebaseMessaging.instance.subscribeToTopic('messages').then((_) {\n+//   //   print('Subscribed to topic: messages');\n+//   // });\n+\n+//   // // Handle foreground messages\n+//   // FirebaseMessaging.onMessage.listen((RemoteMessage message) {\n+//   //   // Extract the senderId from the data payload\n+//   //   String senderId = message.data['senderId'] ?? '';\n+//   //   // Check if the message sender is not the current user\n+//   //   if (currentUserId.isNotEmpty && senderId != currentUserId) {\n+//   //     // Only show the notification if the message sender is not the current user\n+//   //     _showNotification(\n+//   //       message.notification!.title,\n+//   //       message.notification!.body,\n+//   //     );\n+//   //   } else {\n+//   //     print('Message from self, no notification displayed.');\n+//   //   }\n+//   // });\n+\n+//   initPushNotifications();\n+// }\n+\n+// Future<void> initPushNotifications() async {\n+//   await FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(\n+//     alert: true,\n+//     badge: true,\n+//     sound: true,\n+//   );\n+\n+//   FirebaseMessaging.onBackgroundMessage(handleBackgroundMessage);\n+// }\n+\n+// Function to display local notifications when the app is in the foreground\n+// Future<void> _showNotification(String? title, String? body) async {\n+//   const AndroidNotificationDetails androidPlatformChannelSpecifics =\n+//       AndroidNotificationDetails(\n+//     'high_importance_channel', // ID of the notification channel\n+//     'High Importance Notifications', // Name of the notification channel\n+//     importance: Importance.max,\n+//     priority: Priority.high,\n+//   );\n+\n+//   const NotificationDetails platformChannelSpecifics = NotificationDetails(\n+//     android: androidPlatformChannelSpecifics,\n+//   );\n+\n+//   await flutterLocalNotificationsPlugin.show(\n+//     0, // Notification ID\n+//     title, // Notification Title\n+//     body, // Notification Body\n+//     platformChannelSpecifics,\n+//   );\n+// }\n+\n+// Future<void> handleBackgroundMessage(RemoteMessage message) async {\n+//   print('Title: ${message.notification!.title}');\n+//   print('Body: ${message.notification!.body}');\n+//   print('Payload: ${message.data}');\n+// }\n"
                }
            ],
            "date": 1728312843803,
            "name": "Commit-0",
            "content": "import 'dart:async';\nimport 'package:auto_asig/core/app/app_data.dart';\nimport 'package:auto_asig/core/app/auto-asig.dart';\nimport 'package:auto_asig/core/dependency_injection/dependencies_provider.dart';\nimport 'package:auto_asig/firebase_options.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_core/firebase_core.dart';\nimport 'package:firebase_crashlytics/firebase_crashlytics.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:sentry_flutter/sentry_flutter.dart';\n\nFuture<void> runAutoAsigApp() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  _lockOrientation();\n  _setSystemOverlayStyle();\n\n  await Firebase.initializeApp(\n    options: DefaultFirebaseOptions.currentPlatform,\n  );\n\n  const fatalError = true;\n  FlutterError.onError = (errorDetails) {\n    if (fatalError) {\n      FirebaseCrashlytics.instance.recordFlutterFatalError(errorDetails);\n    } else {\n      FirebaseCrashlytics.instance.recordFlutterError(errorDetails);\n    }\n  };\n  PlatformDispatcher.instance.onError = (error, stack) {\n    if (fatalError) {\n      FirebaseCrashlytics.instance.recordError(error, stack, fatal: true);\n    } else {\n      FirebaseCrashlytics.instance.recordError(error, stack);\n    }\n    return true;\n  };\n\n  db = FirebaseFirestore.instance;\n\n  userCollection = FirebaseFirestore.instance.collection('users');\n  appDataCollection = FirebaseFirestore.instance.collection('app_data');\n  vehicleCollection = FirebaseFirestore.instance.collection('vehicles');\n\n  // messaging = FirebaseMessaging.instance;\n\n  // await initNotification();\n\n  await SentryFlutter.init(\n    (options) {\n      options.dsn =\n          'https://94199d009d562d6ba64c8c136991fbc8@o4505488006512640.ingest.us.sentry.io/4508052539179008';\n      options.tracesSampleRate = 1.0;\n    },\n    appRunner: () => runApp(\n      const DependenciesProvider(\n        child: AutoAsig(),\n      ),\n    ),\n  );\n}\n\nvoid _lockOrientation() {\n  SystemChrome.setPreferredOrientations(\n    <DeviceOrientation>[DeviceOrientation.portraitUp],\n  );\n}\n\nvoid _setSystemOverlayStyle() {\n  SystemChrome.setSystemUIOverlayStyle(\n    const SystemUiOverlayStyle(\n      statusBarColor: Colors.transparent,\n      statusBarIconBrightness: Brightness.dark,\n      statusBarBrightness: Brightness.light,\n      systemNavigationBarColor: Colors.white,\n      systemNavigationBarIconBrightness: Brightness.dark,\n    ),\n  );\n}\n\n// // Initialize the FlutterLocalNotificationsPlugin\n// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\n//     FlutterLocalNotificationsPlugin();\n\n// Future<void> initNotification() async {\n//   // Initialize local notifications\n//   const AndroidInitializationSettings initializationSettingsAndroid =\n//       AndroidInitializationSettings('@mipmap/launcher_icon');\n\n//   const InitializationSettings initializationSettings = InitializationSettings(\n//     android: initializationSettingsAndroid,\n//   );\n\n//   await flutterLocalNotificationsPlugin.initialize(initializationSettings);\n\n//   // if (Platform.isIOS) {\n//   //   // Request permission for iOS devices\n//   //   await messaging!.requestPermission();\n//   // }\n\n//   // // Get the FCM token (works for both iOS and Android)\n//   // fCMToken = await messaging!.getToken();\n\n//   // print('FCM Token: $fCMToken');\n\n//   // // Subscribe the device to the 'messages' topic\n//   // await FirebaseMessaging.instance.subscribeToTopic('messages').then((_) {\n//   //   print('Subscribed to topic: messages');\n//   // });\n\n//   // // Handle foreground messages\n//   // FirebaseMessaging.onMessage.listen((RemoteMessage message) {\n//   //   // Extract the senderId from the data payload\n//   //   String senderId = message.data['senderId'] ?? '';\n//   //   // Check if the message sender is not the current user\n//   //   if (currentUserId.isNotEmpty && senderId != currentUserId) {\n//   //     // Only show the notification if the message sender is not the current user\n//   //     _showNotification(\n//   //       message.notification!.title,\n//   //       message.notification!.body,\n//   //     );\n//   //   } else {\n//   //     print('Message from self, no notification displayed.');\n//   //   }\n//   // });\n\n//   initPushNotifications();\n// }\n\n// Future<void> initPushNotifications() async {\n//   await FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(\n//     alert: true,\n//     badge: true,\n//     sound: true,\n//   );\n\n//   FirebaseMessaging.onBackgroundMessage(handleBackgroundMessage);\n// }\n\n// Function to display local notifications when the app is in the foreground\n// Future<void> _showNotification(String? title, String? body) async {\n//   const AndroidNotificationDetails androidPlatformChannelSpecifics =\n//       AndroidNotificationDetails(\n//     'high_importance_channel', // ID of the notification channel\n//     'High Importance Notifications', // Name of the notification channel\n//     importance: Importance.max,\n//     priority: Priority.high,\n//   );\n\n//   const NotificationDetails platformChannelSpecifics = NotificationDetails(\n//     android: androidPlatformChannelSpecifics,\n//   );\n\n//   await flutterLocalNotificationsPlugin.show(\n//     0, // Notification ID\n//     title, // Notification Title\n//     body, // Notification Body\n//     platformChannelSpecifics,\n//   );\n// }\n\n// Future<void> handleBackgroundMessage(RemoteMessage message) async {\n//   print('Title: ${message.notification!.title}');\n//   print('Body: ${message.notification!.body}');\n//   print('Payload: ${message.data}');\n// }\n"
        }
    ]
}