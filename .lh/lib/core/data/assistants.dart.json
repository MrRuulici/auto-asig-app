{
    "sourceFile": "lib/core/data/assistants.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1728289459494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728304975127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -415,4 +415,9 @@\n   }\n \n   return randomString;\n }\n+\n+bool checkIfDateIsInFuture(DateTime date) {\n+  DateTime now = DateTime.now();\n+  return date.isAfter(now);\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729352133664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -420,4 +420,12 @@\n bool checkIfDateIsInFuture(DateTime date) {\r\n   DateTime now = DateTime.now();\r\n   return date.isAfter(now);\r\n }\r\n+\r\n+DateTime? convertTimestampToDateTime(Timestamp? timestamp) {\r\n+  if (timestamp == null) {\r\n+    return null;\r\n+  }\r\n+\r\n+  return timestamp.toDate();\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729355647948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -428,4 +428,17 @@\n   }\r\n \r\n   return timestamp.toDate();\r\n }\r\n+\r\n+String convertReminderTypeToString(ReminderType type) {\r\n+  switch (type) {\r\n+    case ReminderType.idCard:\r\n+      return 'Card de identitate';\r\n+    case ReminderType.drivingLicense:\r\n+      return 'Permis de conducere';\r\n+    case ReminderType.passport:\r\n+      return 'Pașaport';\r\n+    default:\r\n+      return 'Error';\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1730879251499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -441,4 +441,16 @@\n     default:\r\n       return 'Error';\r\n   }\r\n }\r\n+\r\n+void showLoadingDialog(BuildContext context) {\r\n+  showDialog(\r\n+    context: context,\r\n+    barrierDismissible: false,\r\n+    builder: (BuildContext context) {\r\n+      return const Center(\r\n+        child: CircularProgressIndicator(),\r\n+      );\r\n+    },\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1730883777723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,18 @@\n   // Verifică dacă adresa de email respectă regula\r\n   return emailRegex.hasMatch(email);\r\n }\r\n \r\n+bool validatePhoneNumber(String phoneNumber) {\r\n+  // Regular expression to match valid phone numbers\r\n+  // Allows country codes with `+`, `-`, or spaces between groups of numbers\r\n+  // Assumes a phone number length between 10 and 15 digits\r\n+  final RegExp phoneRegex = RegExp(r'^\\+?[0-9]{10,15}$');\r\n+\r\n+  return phoneRegex.hasMatch(phoneNumber);\r\n+}\r\n+\r\n+\r\n void showMemberPopupDialog(\r\n     BuildContext context, UserModel member, void Function()? onConfirm) {\r\n   showDialog(\r\n     context: context,\r\n"
                },
                {
                    "date": 1730885968990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,17 +100,24 @@\n   // Verifică dacă adresa de email respectă regula\r\n   return emailRegex.hasMatch(email);\r\n }\r\n \r\n-bool validatePhoneNumber(String phoneNumber) {\r\n-  // Regular expression to match valid phone numbers\r\n-  // Allows country codes with `+`, `-`, or spaces between groups of numbers\r\n-  // Assumes a phone number length between 10 and 15 digits\r\n-  final RegExp phoneRegex = RegExp(r'^\\+?[0-9]{10,15}$');\r\n+bool validatePhoneNumber(String countryCode, String phoneNumber) {\r\n+  // Remove spaces, dashes, or any extra symbols from the phone number\r\n+  final sanitizedPhoneNumber = phoneNumber.replaceAll(RegExp(r'\\s+|-'), '');\r\n \r\n-  return phoneRegex.hasMatch(phoneNumber);\r\n+  // Combine country code and phone number\r\n+  final fullNumber = '$countryCode$sanitizedPhoneNumber';\r\n+\r\n+  // Basic regex for international numbers (supports country codes +10 digits)\r\n+  final phonePattern = r'^\\+\\d{1,3}\\d{10,14}$';\r\n+  final regex = RegExp(phonePattern);\r\n+\r\n+  // Validate with regex\r\n+  return regex.hasMatch(fullNumber);\r\n }\r\n \r\n+\r\n void showMemberPopupDialog(\r\n     BuildContext context, UserModel member, void Function()? onConfirm) {\r\n   showDialog(\r\n     context: context,\r\n"
                },
                {
                    "date": 1730888859045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n     builder: (BuildContext ctx) {\r\n       return AlertDialog(\r\n         title: const Text('Confirmare'),\r\n         content: Text(\r\n-          'Ești sigur că vrei să modifici prezența membrului ${member.fullName}?',\r\n+          'Ești sigur că vrei să modifici prezența membrului ${member.firstName}?',\r\n           style: const TextStyle(fontSize: theFontSize),\r\n         ),\r\n         actions: <Widget>[\r\n           TextButton(\r\n"
                }
            ],
            "date": 1728289459494,
            "name": "Commit-0",
            "content": "import 'dart:math';\r\n\r\nimport 'package:auto_asig/core/data/constants.dart';\r\nimport 'package:auto_asig/core/models/user.dart';\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport 'package:flutter/material.dart';\r\n\r\nint selectedGroup = 0;\r\n\r\nString getDayOfWeek(DateTime date) {\r\n  final dayOfWeek = date.weekday;\r\n\r\n  switch (dayOfWeek) {\r\n    case DateTime.monday:\r\n      return \"Luni\";\r\n    case DateTime.tuesday:\r\n      return \"Marți\";\r\n    case DateTime.wednesday:\r\n      return \"Miercuri\";\r\n    case DateTime.thursday:\r\n      return \"Joi\";\r\n    case DateTime.friday:\r\n      return \"Vineri\";\r\n    case DateTime.saturday:\r\n      return \"Sâmbătă\";\r\n    case DateTime.sunday:\r\n      return \"Duminică\";\r\n    default:\r\n      return \"Zi necunoscută\";\r\n  }\r\n}\r\n\r\nString getMonthNameFromEnum(Months month) {\r\n  switch (month) {\r\n    case Months.Ianuarie:\r\n      return 'Ianuarie';\r\n    case Months.Februarie:\r\n      return 'Februarie';\r\n    case Months.Martie:\r\n      return 'Martie';\r\n    case Months.Aprilie:\r\n      return 'Aprilie';\r\n    case Months.Mai:\r\n      return 'Mai';\r\n    case Months.Iunie:\r\n      return 'Iunie';\r\n    case Months.Iulie:\r\n      return 'Iulie';\r\n    case Months.August:\r\n      return 'August';\r\n    case Months.Septembrie:\r\n      return 'Septembrie';\r\n    case Months.Octombrie:\r\n      return 'Octombrie';\r\n    case Months.Noiembrie:\r\n      return 'Noiembrie';\r\n    case Months.Decembrie:\r\n      return 'Decembrie';\r\n    default:\r\n      return 'Error';\r\n  }\r\n}\r\n\r\nString translateMonthName(String monthEnglish) {\r\n  switch (monthEnglish) {\r\n    case 'January':\r\n      return 'Ianuarie';\r\n    case 'February':\r\n      return 'Februarie';\r\n    case 'March':\r\n      return 'Martie';\r\n    case 'April':\r\n      return 'Aprilie';\r\n    case 'May':\r\n      return 'Mai';\r\n    case 'June':\r\n      return 'Iunie';\r\n    case 'July':\r\n      return 'Iulie';\r\n    case 'August':\r\n      return 'August';\r\n    case 'September':\r\n      return 'Septembrie';\r\n    case 'October':\r\n      return 'Octombrie';\r\n    case 'November':\r\n      return 'Noiembrie';\r\n    case 'December':\r\n      return 'Decembrie';\r\n    default:\r\n      return 'Error';\r\n  }\r\n}\r\n\r\nbool validateEmail(String email) {\r\n  // Regulă de validare a adresei de email\r\n  RegExp emailRegex =\r\n      RegExp(r\"^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,})$\");\r\n\r\n  // Verifică dacă adresa de email respectă regula\r\n  return emailRegex.hasMatch(email);\r\n}\r\n\r\nvoid showMemberPopupDialog(\r\n    BuildContext context, UserModel member, void Function()? onConfirm) {\r\n  showDialog(\r\n    context: context,\r\n    builder: (BuildContext ctx) {\r\n      return AlertDialog(\r\n        title: const Text('Confirmare'),\r\n        content: Text(\r\n          'Ești sigur că vrei să modifici prezența membrului ${member.fullName}?',\r\n          style: const TextStyle(fontSize: theFontSize),\r\n        ),\r\n        actions: <Widget>[\r\n          TextButton(\r\n            onPressed: () {\r\n              Navigator.of(context).pop(); // Închide popup-ul\r\n            },\r\n            child: const Text(\r\n              'Nu',\r\n              style: TextStyle(fontSize: theFontSize),\r\n            ),\r\n          ),\r\n          TextButton(\r\n            onPressed: () {\r\n              onConfirm!.call();\r\n              Navigator.of(context).pop(); // Închide popup-ul după confirmare\r\n            },\r\n            child: const Text(\r\n              'Da',\r\n              style: TextStyle(fontSize: theFontSize),\r\n            ),\r\n          ),\r\n        ],\r\n      );\r\n    },\r\n  );\r\n}\r\n\r\nvoid showConfirmationDialog(\r\n  BuildContext context,\r\n  String title,\r\n  String message,\r\n  void Function()? onConfirm,\r\n) {\r\n  showDialog(\r\n    context: context,\r\n    builder: (BuildContext ctx) {\r\n      return AlertDialog(\r\n        title: Text(title),\r\n        content: Text(\r\n          message,\r\n          style: const TextStyle(fontSize: theFontSize),\r\n        ),\r\n        actions: <Widget>[\r\n          TextButton(\r\n            onPressed: () {\r\n              Navigator.of(context).pop(); // Închide popup-ul\r\n            },\r\n            child: const Text(\r\n              'Nu',\r\n              style: TextStyle(fontSize: theFontSize),\r\n            ),\r\n          ),\r\n          TextButton(\r\n            onPressed: () {\r\n              if (onConfirm != null) {\r\n                onConfirm();\r\n              }\r\n              Navigator.of(context).pop(); // Închide popup-ul după confirmare\r\n            },\r\n            child: const Text(\r\n              'Da',\r\n              style: TextStyle(fontSize: theFontSize),\r\n            ),\r\n          ),\r\n        ],\r\n      );\r\n    },\r\n  );\r\n}\r\n\r\nvoid showInfoDialog(BuildContext context, String title, String message) {\r\n  showDialog(\r\n    context: context,\r\n    builder: (BuildContext ctx) {\r\n      return AlertDialog(\r\n        title: Text(title),\r\n        content: Text(\r\n          message,\r\n          style: const TextStyle(fontSize: theFontSize),\r\n        ),\r\n        actions: <Widget>[\r\n          TextButton(\r\n            onPressed: () {\r\n              Navigator.of(context).pop(); // Închide popup-ul\r\n            },\r\n            child: const Text(\r\n              'OK',\r\n              style: TextStyle(fontSize: theFontSize),\r\n            ),\r\n          ),\r\n        ],\r\n      );\r\n    },\r\n  );\r\n}\r\n\r\nString convertMonth(int month) {\r\n  switch (month) {\r\n    case 1:\r\n      return 'Ianuarie';\r\n    case 2:\r\n      return 'Februarie';\r\n    case 3:\r\n      return 'Martie';\r\n    case 4:\r\n      return 'Aprilie';\r\n    case 5:\r\n      return 'Mai';\r\n    case 6:\r\n      return 'Iunie';\r\n    case 7:\r\n      return 'Iulie';\r\n    case 8:\r\n      return 'August';\r\n    case 9:\r\n      return 'Septembrie';\r\n    case 10:\r\n      return 'Octombrie';\r\n    case 11:\r\n      return 'Noiembrie';\r\n    case 12:\r\n      return 'Decembrie';\r\n    default:\r\n      return 'Error';\r\n  }\r\n}\r\n\r\nString convertMonthType(Months month) {\r\n  switch (month) {\r\n    case Months.Ianuarie:\r\n      return 'Ianuarie';\r\n    case Months.Februarie:\r\n      return 'Februarie';\r\n    case Months.Martie:\r\n      return 'Martie';\r\n    case Months.Aprilie:\r\n      return 'Aprilie';\r\n    case Months.Mai:\r\n      return 'Mai';\r\n    case Months.Iunie:\r\n      return 'Iunie';\r\n    case Months.Iulie:\r\n      return 'Iulie';\r\n    case Months.August:\r\n      return 'August';\r\n    case Months.Septembrie:\r\n      return 'Septembrie';\r\n    case Months.Octombrie:\r\n      return 'Octombrie';\r\n    case Months.Noiembrie:\r\n      return 'Noiembrie';\r\n    case Months.Decembrie:\r\n      return 'Decembrie';\r\n    default:\r\n      return 'Error';\r\n  }\r\n}\r\n\r\nMonths pickNextMonth(String monthName) {\r\n  switch (monthName) {\r\n    case 'Ianuarie':\r\n      return Months.Februarie;\r\n    case 'Februarie':\r\n      return Months.Martie;\r\n    case 'Martie':\r\n      return Months.Aprilie;\r\n    case 'Aprilie':\r\n      return Months.Mai;\r\n    case 'Mai':\r\n      return Months.Iunie;\r\n    case 'Iunie':\r\n      return Months.Iulie;\r\n    case 'Iulie':\r\n      return Months.August;\r\n    case 'August':\r\n      return Months.Septembrie;\r\n    case 'Septembrie':\r\n      return Months.Octombrie;\r\n    case 'Octombrie':\r\n      return Months.Noiembrie;\r\n    case 'Noiembrie':\r\n      return Months.Decembrie;\r\n    case 'Decembrie':\r\n      return Months.Ianuarie;\r\n    default:\r\n      return Months.Ianuarie;\r\n  }\r\n}\r\n\r\nString convertPaymentType(PaymentType type) {\r\n  switch (type) {\r\n    case PaymentType.monthly:\r\n      return 'Lunar';\r\n    case PaymentType.anual:\r\n      return 'Anual';\r\n    default:\r\n      return 'Error';\r\n  }\r\n}\r\n\r\nPaymentType getPaymentType(String period) {\r\n  switch (period.toLowerCase()) {\r\n    case 'anual':\r\n      return PaymentType.anual;\r\n    default:\r\n      return PaymentType.monthly;\r\n  }\r\n}\r\n\r\nvoid showSnackbar(BuildContext context, String message) {\r\n  ScaffoldMessenger.of(context).showSnackBar(\r\n    SnackBar(\r\n      content: Text(\r\n        message,\r\n        style: const TextStyle(fontSize: theFontSize),\r\n      ),\r\n      // action: SnackBarAction(\r\n      //   label: 'OK',\r\n      //   onPressed: () {\r\n      //     ScaffoldMessenger.of(context).hideCurrentSnackBar();\r\n      //   },\r\n      // ),\r\n    ),\r\n  );\r\n}\r\n\r\nString convertDateToDay(DateTime date) {\r\n  return weekdays[date.weekday - 1];\r\n}\r\n\r\nTimestamp convertStringToTimestamp(String dateString) {\r\n  // Separă componentele datei\r\n  List<String> parts = dateString.split('-');\r\n  if (parts.length != 3) {\r\n    throw FormatException('Formatul datei nu este corect: $dateString');\r\n  }\r\n\r\n  // Creează un obiect DateTime\r\n  int day = int.parse(parts[0]);\r\n  int month = int.parse(parts[1]);\r\n  int year = int.parse(parts[2]);\r\n  DateTime dateTime = DateTime(year, month, day);\r\n\r\n  // Converteste DateTime în Timestamp\r\n  return Timestamp.fromDate(dateTime);\r\n}\r\n\r\nDateTime convertStringToDateTime(String dateString) {\r\n  // Separă componentele datei\r\n  List<String> parts = dateString.split('-');\r\n  if (parts.length != 3) {\r\n    throw FormatException('Formatul datei nu este corect: $dateString');\r\n  }\r\n\r\n  // Converteste componentele separate în numere întregi\r\n  int day = int.parse(parts[0]);\r\n  int month = int.parse(parts[1]);\r\n  int year = int.parse(parts[2]);\r\n\r\n  // Creează un obiect DateTime\r\n  return DateTime(year, month, day);\r\n}\r\n\r\nString removeDiacritics(String str) {\r\n  var withDiacritics =\r\n      'ăâîșțĂÂÎȘȚáéíóúýÁÉÍÓÚÝäëïöüÿÄËÏÖÜŸàèìòùÀÈÌÒÙãñõÃÑÕåÅęłńśźżĘŁŃŚŹŻçÇđĐøØßğĞşŞţŢ';\r\n  var withoutDiacritics =\r\n      'aaistAAISTaeiouyAEIOUYaeiouyAEIOUYaeiouAEIOUanoANOaAelnSzzELNSZZcCdDoOsgGsStT';\r\n\r\n  for (int i = 0; i < withDiacritics.length; i++) {\r\n    str = str.replaceAll(withDiacritics[i], withoutDiacritics[i]);\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\nvoid showLoadingOverlay(BuildContext context) {\r\n  showDialog(\r\n    context: context,\r\n    barrierDismissible: false,\r\n    builder: (BuildContext context) {\r\n      return const Center(\r\n        child: CircularProgressIndicator(),\r\n      );\r\n    },\r\n  );\r\n}\r\n\r\nvoid hideLoadingOverlay(BuildContext context) {\r\n  Navigator.of(context).pop();\r\n}\r\n\r\nString generateRandomString() {\r\n  const characters =\r\n      'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n  Random random = Random();\r\n  String randomString = '';\r\n\r\n  for (int i = 0; i < 20; i++) {\r\n    int randomIndex = random.nextInt(characters.length);\r\n    randomString += characters[randomIndex];\r\n  }\r\n\r\n  return randomString;\r\n}\r\n"
        }
    ]
}