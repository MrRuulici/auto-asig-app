{
    "sourceFile": "lib/core/helpers/notification_helper.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1733144665514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733145084618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,18 +72,27 @@\n       }\n     }\n   }\n \n-  static Future<bool> hasNotificationWithId(int id) async {\n+    static Future<int> generateUniqueNotificationId() async {\n     final List<PendingNotificationRequest> pendingNotifications =\n         await _notificationsPlugin.pendingNotificationRequests();\n-\n-    for (var notification in pendingNotifications) {\n-      if (notification.id == id) {\n-        return true;\n+  \n+    int i = 0;\n+    bool idExists;\n+  \n+    do {\n+      idExists = false;\n+      for (var notification in pendingNotifications) {\n+        if (notification.id == i) {\n+          idExists = true;\n+          i++;\n+          break;\n+        }\n       }\n-    }\n-    return false;\n+    } while (idExists);\n+  \n+    return i;\n   }\n \n   // static void scheduleNotificationFromModel(NotificationModel notification) {\n   //   if (notification.push) {\n"
                },
                {
                    "date": 1733153837422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+import 'dart:math';\n+\n import 'package:auto_asig/core/models/notification_model.dart';\n import 'package:flutter_local_notifications/flutter_local_notifications.dart';\n import 'package:timezone/timezone.dart' as tz;\n import 'package:timezone/data/latest.dart' as tz;\n@@ -76,9 +78,12 @@\n   static Future<int> generateUniqueNotificationId() async {\n     final List<PendingNotificationRequest> pendingNotifications =\n         await _notificationsPlugin.pendingNotificationRequests();\n \n-    int i = 0;\n+    // random generate an int between 0 and 10000\n+    \n+\n+    int i = _generateRandomInt(0, 10000);\n     bool idExists;\n \n     do {\n       idExists = false;\n@@ -146,5 +151,11 @@\n \n   static Future<void> cancelAllNotifications() async {\n     await _notificationsPlugin.cancelAll();\n   }\n+\n+\n+static int _generateRandomInt(int min, int max) {\n+  final Random random = Random();\n+  return min + random.nextInt(max - min + 1);\n }\n+}\n"
                }
            ],
            "date": 1733144665514,
            "name": "Commit-0",
            "content": "import 'package:auto_asig/core/models/notification_model.dart';\nimport 'package:flutter_local_notifications/flutter_local_notifications.dart';\nimport 'package:timezone/timezone.dart' as tz;\nimport 'package:timezone/data/latest.dart' as tz;\n\nclass NotificationHelper {\n  static final FlutterLocalNotificationsPlugin _notificationsPlugin =\n      FlutterLocalNotificationsPlugin();\n\n  // Initialize notifications\n  static Future<void> initialize() async {\n    // Initialize TimeZone database\n    tz.initializeTimeZones();\n\n    // Define settings for Android\n    const AndroidInitializationSettings initializationSettingsAndroid =\n        AndroidInitializationSettings('@mipmap/ic_launcher');\n\n    // Define settings for iOS (optional)\n    const InitializationSettings initializationSettings =\n        InitializationSettings(android: initializationSettingsAndroid);\n\n    // Initialize the plugin\n    await _notificationsPlugin.initialize(initializationSettings);\n  }\n\n  static Future<void> scheduleNotification({\n    required int id,\n    required String title,\n    required String body,\n    required DateTime dateTime,\n  }) async {\n    // Android-specific details\n    const AndroidNotificationDetails androidDetails =\n        AndroidNotificationDetails(\n      'reminders_channel', // Channel ID\n      'Reminders', // Channel Name\n      channelDescription: 'This channel is for reminders notifications',\n      importance: Importance.high,\n      priority: Priority.high,\n    );\n\n    // Notification details\n    const NotificationDetails notificationDetails =\n        NotificationDetails(android: androidDetails);\n\n    // Schedule the notification\n    await _notificationsPlugin.zonedSchedule(\n      id, // Unique ID for the notification\n      title, // Notification title\n      body, // Notification body\n      tz.TZDateTime.from(dateTime, tz.local), // Scheduled time\n      notificationDetails, // Notification details\n      androidScheduleMode:\n          AndroidScheduleMode.exactAllowWhileIdle, // Add this line\n      uiLocalNotificationDateInterpretation:\n          UILocalNotificationDateInterpretation.absoluteTime,\n    );\n  }\n\n  static void scheduleNotifications(List<NotificationModel> notifications) {\n    for (int i = 0; i < notifications.length; i++) {\n      final notification = notifications[i];\n\n      if (notification.push) {\n        NotificationHelper.scheduleNotification(\n          id: i, // Unique ID for each notification\n          title: 'Reminder',\n          body: 'Your notification is scheduled for ${notification.date}.',\n          dateTime: notification.date,\n        );\n      }\n    }\n  }\n\n  static Future<bool> hasNotificationWithId(int id) async {\n    final List<PendingNotificationRequest> pendingNotifications =\n        await _notificationsPlugin.pendingNotificationRequests();\n\n    for (var notification in pendingNotifications) {\n      if (notification.id == id) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // static void scheduleNotificationFromModel(NotificationModel notification) {\n  //   if (notification.push) {\n  //     NotificationHelper.scheduleNotification(\n  //       id: notification.id, // Unique ID for each notification\n  //       title: 'Reminder',\n  //       body: 'Your notification is scheduled for ${notification.date}.',\n  //       dateTime: notification.date,\n  //     );\n  //   }\n  // }\n\n  // update the notification\n  static Future<void> updateNotification({\n    required int id,\n    required String title,\n    required String body,\n    required DateTime dateTime,\n  }) async {\n    // Android-specific details\n    const AndroidNotificationDetails androidDetails =\n        AndroidNotificationDetails(\n      'reminders_channel', // Channel ID\n      'Reminders', // Channel Name\n      channelDescription: 'This channel is for reminders notifications',\n      importance: Importance.high,\n      priority: Priority.high,\n    );\n\n    // Notification details\n    const NotificationDetails notificationDetails =\n        NotificationDetails(android: androidDetails);\n\n    // Schedule the notification\n    await _notificationsPlugin.zonedSchedule(\n      id, // Unique ID for the notification\n      title, // Notification title\n      body, // Notification body\n      tz.TZDateTime.from(dateTime, tz.local), // Scheduled time\n      notificationDetails, // Notification details\n      androidScheduleMode:\n          AndroidScheduleMode.exactAllowWhileIdle, // Add this line\n      uiLocalNotificationDateInterpretation:\n          UILocalNotificationDateInterpretation.absoluteTime,\n    );\n  }\n\n  static Future<void> cancelNotification(int id) async {\n    await _notificationsPlugin.cancel(id);\n  }\n\n  static Future<void> cancelAllNotifications() async {\n    await _notificationsPlugin.cancelAll();\n  }\n}\n"
        }
    ]
}