{
    "sourceFile": "lib/feature/cars_reg/screens/edit_car_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1737291169385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1737291800870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,16 @@\n                   style: TextStyle(\n                     fontWeight: FontWeight.w600,\n                   ),\n                 ),\n+              ),  Padding(\n+                padding: EdgeInsets.only(top: 16),\n+                child: Text(\n+                  'Număr de înmatriculare: ${vehicleReminder!.registrationNumber ?? 'NECUNOSCUT'}',\n+                  style: TextStyle(\n+                    fontWeight: FontWeight.w600,\n+                  ),\n+                ),\n               ),\n               const SizedBox(height: 20),\n               ExpirationSection(\n                 label: \"ITP\",\n"
                },
                {
                    "date": 1737291808191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,12 +53,13 @@\n                   ),\n                 ),\n               ),\n               Padding(\n-                padding: EdgeInsets.only(top: 16),\n+                padding: const EdgeInsets.only(top: 16),\n                 child: Text(\n                   'Număr de înmatriculare: ${vehicleReminder!.registrationNumber ?? 'NECUNOSCUT'}',\n-                  style: TextStyle(\n+                  style: TextSt\n+                  yle(\n                     fontWeight: FontWeight.w600,\n                   ),\n                 ),\n               ),\n"
                },
                {
                    "date": 1737291823899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n               ),\n               Padding(\n                 padding: const EdgeInsets.only(top: 16),\n                 child: Text(\n-                  'Număr de înmatriculare: ${vehicleReminder!.registrationNumber ?? 'NECUNOSCUT'}',\n+                  'Număr de înmatriculare: ${vehicleReminder!.registrationNumber.toUpperCase() ?? 'NECUNOSCUT'}',\n                   style: const TextStyle(\n                     fontWeight: FontWeight.w600,\n                   ),\n                 ),\n"
                }
            ],
            "date": 1737291169385,
            "name": "Commit-0",
            "content": "import 'package:auto_asig/feature/home_screen/screens/home_screen.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:auto_asig/core/data/constants.dart';\nimport 'package:auto_asig/core/widgets/auto_asig_appbar.dart';\nimport 'package:auto_asig/core/widgets/auto_asig_button_full.dart';\nimport 'package:auto_asig/feature/cars_reg/cubit/edit_vehicle_reminder_cubit.dart';\nimport 'package:auto_asig/feature/cars_reg/widgets/expiration_section.dart';\n\nclass EditCarScreen extends StatelessWidget {\n  const EditCarScreen({super.key});\n\n  static const String path = 'editCarScreen';\n  static const String absolutePath = '${HomeScreen.path}/$path';\n\n  @override\n  Widget build(BuildContext context) {\n    final cubit = context.read<EditVehicleReminderCubit>();\n    final state = context.watch<EditVehicleReminderCubit>().state;\n\n    final vehicleReminder = state.vehicleReminder;\n\n    return Scaffold(\n      appBar: AlliatAppBar(),\n      body: Container(\n        color: Colors.white,\n        padding: const EdgeInsets.symmetric(horizontal: padding),\n        child: SingleChildScrollView(\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.center,\n            children: [\n              const SizedBox(height: 20),\n              const Row(\n                mainAxisAlignment: MainAxisAlignment.start,\n                children: [\n                  Text(\n                    'Editează Vehicul',\n                    style: TextStyle(\n                      fontSize: 25,\n                      color: buttonBlue,\n                      fontFamily: 'Poppins',\n                      fontWeight: FontWeight.w900,\n                    ),\n                  ),\n                ],\n              ),\n              const Padding(\n                padding: EdgeInsets.only(top: 16),\n                child: Text(\n                  'Editează datele vehiculului și expirările aferente:',\n                  style: TextStyle(\n                    fontWeight: FontWeight.w600,\n                  ),\n                ),\n              ),\n              const SizedBox(height: 20),\n              ExpirationSection(\n                label: \"ITP\",\n                type: VehicleNotificationType.ITP,\n                selectedDate: vehicleReminder?.expirationDateITP,\n                updateDate: (date) =>\n                    cubit.updateExpirationDateITP(date),\n                clearDate: () =>\n                    cubit.updateExpirationDateITP(null),\n                notifications: vehicleReminder?.notificationsITP ?? [],\n                addNotification: (date, sms, email, push) async {\n                  int notificationId =\n                      await cubit.generateUniqueNotificationId();\n                  cubit.addNotification(\n                    VehicleNotificationType.ITP,\n                    date,\n                    sms,\n                    email,\n                    push,\n                    notificationId,\n                  );\n                },\n                removeNotification: (index) =>\n                    cubit.removeNotification(VehicleNotificationType.ITP, index),\n              ),\n              const SizedBox(height: 20),\n              ExpirationSection(\n                label: \"RCA\",\n                type: VehicleNotificationType.RCA,\n                selectedDate: vehicleReminder?.expirationDateRCA,\n                updateDate: (date) =>\n                    cubit.updateExpirationDateRCA(date),\n                clearDate: () =>\n                    cubit.updateExpirationDateRCA(null),\n                notifications: vehicleReminder?.notificationsRCA ?? [],\n                addNotification: (date, sms, email, push) async {\n                  int notificationId =\n                      await cubit.generateUniqueNotificationId();\n                  cubit.addNotification(\n                    VehicleNotificationType.RCA,\n                    date,\n                    sms,\n                    email,\n                    push,\n                    notificationId,\n                  );\n                },\n                removeNotification: (index) =>\n                    cubit.removeNotification(VehicleNotificationType.RCA, index),\n              ),\n              const SizedBox(height: 20),\n              ExpirationSection(\n                label: \"CASCO\",\n                type: VehicleNotificationType.CASCO,\n                selectedDate: vehicleReminder?.expirationDateCASCO,\n                updateDate: (date) =>\n                    cubit.updateExpirationDateCASCO(date),\n                clearDate: () =>\n                    cubit.updateExpirationDateCASCO(null),\n                notifications: vehicleReminder?.notificationsCASCO ?? [],\n                addNotification: (date, sms, email, push) async {\n                  int notificationId =\n                      await cubit.generateUniqueNotificationId();\n                  cubit.addNotification(\n                    VehicleNotificationType.CASCO,\n                    date,\n                    sms,\n                    email,\n                    push,\n                    notificationId,\n                  );\n                },\n                removeNotification: (index) =>\n                    cubit.removeNotification(VehicleNotificationType.CASCO, index),\n              ),\n              const SizedBox(height: 20),\n              ExpirationSection(\n                label: \"Rovinieta\",\n                type: VehicleNotificationType.Rovinieta,\n                selectedDate: vehicleReminder?.expirationDateRovinieta,\n                updateDate: (date) =>\n                    cubit.updateExpirationDateRovinieta(date),\n                clearDate: () =>\n                    cubit.updateExpirationDateRovinieta(null),\n                notifications: vehicleReminder?.notificationsRovinieta ?? [],\n                addNotification: (date, sms, email, push) async {\n                  int notificationId =\n                      await cubit.generateUniqueNotificationId();\n                  cubit.addNotification(\n                    VehicleNotificationType.Rovinieta,\n                    date,\n                    sms,\n                    email,\n                    push,\n                    notificationId,\n                  );\n                },\n                removeNotification: (index) =>\n                    cubit.removeNotification(VehicleNotificationType.Rovinieta, index),\n              ),\n              const SizedBox(height: 20),\n              ExpirationSection(\n                label: \"Tahograf\",\n                type: VehicleNotificationType.Tahograf,\n                selectedDate: vehicleReminder?.expirationDateTahograf,\n                updateDate: (date) =>\n                    cubit.updateExpirationDateTahograf(date),\n                clearDate: () =>\n                    cubit.updateExpirationDateTahograf(null),\n                notifications: vehicleReminder?.notificationsTahograf ?? [],\n                addNotification: (date, sms, email, push) async {\n                  int notificationId =\n                      await cubit.generateUniqueNotificationId();\n                  cubit.addNotification(\n                    VehicleNotificationType.Tahograf,\n                    date,\n                    sms,\n                    email,\n                    push,\n                    notificationId,\n                  );\n                },\n                removeNotification: (index) =>\n                    cubit.removeNotification(VehicleNotificationType.Tahograf, index),\n              ),\n            ],\n          ),\n        ),\n      ),\n      bottomNavigationBar: Padding(\n        padding: const EdgeInsets.symmetric(horizontal: padding),\n        child: AutoAsigButton(\n          onPressed: () async {\n            // Show loading dialog\n            showDialog(\n              context: context,\n              builder: (context) => const Center(\n                child: CircularProgressIndicator(),\n              ),\n            );\n\n            try {\n              await cubit.saveChanges();\n              Navigator.of(context).pop();\n              ScaffoldMessenger.of(context).showSnackBar(\n                const SnackBar(\n                  content: Text('Vehiculul a fost actualizat cu succes.'),\n                ),\n              );\n            } catch (e) {\n              print(e);\n              Navigator.of(context).pop();\n              ScaffoldMessenger.of(context).showSnackBar(\n                const SnackBar(\n                  content: Text('Eroare la actualizarea vehiculului.'),\n                ),\n              );\n            }\n          },\n          text: 'SALVEAZĂ MODIFICĂRILE',\n        ),\n      ),\n    );\n  }\n}"
        }
    ]
}