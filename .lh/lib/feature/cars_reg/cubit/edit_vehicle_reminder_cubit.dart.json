{
    "sourceFile": "lib/feature/cars_reg/cubit/edit_vehicle_reminder_cubit.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1737291120335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1737291139800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:auto_asig/core/data/constants.dart';\n import 'package:flutter_bloc/flutter_bloc.dart';\n import 'package:auto_asig/core/models/vehicle_reminder.dart';\n import 'package:auto_asig/core/models/notification_model.dart';\n import 'edit_vehicle_reminder_state.dart';\n@@ -76,5 +77,13 @@\n \n   saveChanges() {}\n \n   updateExpirationDateITP(DateTime? date) {}\n+\n+  generateUniqueNotificationId() {}\n+\n+  void addNotification(VehicleNotificationType itp, DateTime date, bool sms, bool email, bool push, int notificationId) {}\n+\n+  removeNotification(VehicleNotificationType itp, int index) {}\n+\n+  updateExpirationDateRCA(DateTime? date) {}\n }\n"
                },
                {
                    "date": 1737291148457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,5 +86,7 @@\n \n   removeNotification(VehicleNotificationType itp, int index) {}\n \n   updateExpirationDateRCA(DateTime? date) {}\n+\n+  updateExpirationDateCASCO(DateTime? date) {}\n }\n"
                },
                {
                    "date": 1737291156284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,5 +88,7 @@\n \n   updateExpirationDateRCA(DateTime? date) {}\n \n   updateExpirationDateCASCO(DateTime? date) {}\n+\n+  updateExpirationDateRovinieta(DateTime? date) {}\n }\n"
                },
                {
                    "date": 1737291166140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,5 +90,7 @@\n \n   updateExpirationDateCASCO(DateTime? date) {}\n \n   updateExpirationDateRovinieta(DateTime? date) {}\n+\n+  updateExpirationDateTahograf(DateTime? date) {}\n }\n"
                },
                {
                    "date": 1737291328733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,90 +7,161 @@\n class EditVehicleReminderCubit extends Cubit<EditVehicleReminderState> {\n   EditVehicleReminderCubit()\n       : super(const EditVehicleReminderState(vehicleReminder: null));\n \n-  get updateRegistrationNumber => null;\n-\n-  get updateCarModel => null;\n-\n+  /// Initializes the vehicle reminder with the provided data\n   void initializeReminder(VehicleReminder reminder) {\n     emit(state.copyWith(vehicleReminder: reminder));\n   }\n \n-  void updateNotificationsITP(List<NotificationModel> notifications) {\n+  /// Updates expiration dates\n+  void updateExpirationDate({\n+    required VehicleNotificationType type,\n+    DateTime? date,\n+  }) {\n     if (state.vehicleReminder == null) return;\n-    emit(\n-      state.copyWith(\n-        vehicleReminder: state.vehicleReminder!.copyWith(\n-          notificationsITP: notifications,\n-        ),\n-      ),\n-    );\n-  }\n \n-  void updateNotificationsRCA(List<NotificationModel> notifications) {\n-    if (state.vehicleReminder == null) return;\n-    emit(\n-      state.copyWith(\n-        vehicleReminder: state.vehicleReminder!.copyWith(\n-          notificationsRCA: notifications,\n-        ),\n-      ),\n-    );\n+    switch (type) {\n+      case VehicleNotificationType.ITP:\n+        emit(\n+          state.copyWith(\n+            vehicleReminder:\n+                state.vehicleReminder!.copyWith(expirationDateITP: date),\n+          ),\n+        );\n+        break;\n+      case VehicleNotificationType.RCA:\n+        emit(\n+          state.copyWith(\n+            vehicleReminder:\n+                state.vehicleReminder!.copyWith(expirationDateRCA: date),\n+          ),\n+        );\n+        break;\n+      case VehicleNotificationType.CASCO:\n+        emit(\n+          state.copyWith(\n+            vehicleReminder:\n+                state.vehicleReminder!.copyWith(expirationDateCASCO: date),\n+          ),\n+        );\n+        break;\n+      case VehicleNotificationType.Rovinieta:\n+        emit(\n+          state.copyWith(\n+            vehicleReminder:\n+                state.vehicleReminder!.copyWith(expirationDateRovinieta: date),\n+          ),\n+        );\n+        break;\n+      case VehicleNotificationType.Tahograf:\n+        emit(\n+          state.copyWith(\n+            vehicleReminder:\n+                state.vehicleReminder!.copyWith(expirationDateTahograf: date),\n+          ),\n+        );\n+        break;\n+    }\n   }\n \n-  void updateNotificationsCASCO(List<NotificationModel> notifications) {\n+  /// Updates notifications\n+  void updateNotifications({\n+    required VehicleNotificationType type,\n+    required List<NotificationModel> notifications,\n+  }) {\n     if (state.vehicleReminder == null) return;\n-    emit(\n-      state.copyWith(\n-        vehicleReminder: state.vehicleReminder!.copyWith(\n-          notificationsCASCO: notifications,\n-        ),\n-      ),\n-    );\n-  }\n \n-  void updateNotificationsRovinieta(List<NotificationModel> notifications) {\n-    if (state.vehicleReminder == null) return;\n-    emit(\n-      state.copyWith(\n-        vehicleReminder: state.vehicleReminder!.copyWith(\n-          notificationsRovinieta: notifications,\n-        ),\n-      ),\n-    );\n+    switch (type) {\n+      case VehicleNotificationType.ITP:\n+        emit(\n+          state.copyWith(\n+            vehicleReminder:\n+                state.vehicleReminder!.copyWith(notificationsITP: notifications),\n+          ),\n+        );\n+        break;\n+      case VehicleNotificationType.RCA:\n+        emit(\n+          state.copyWith(\n+            vehicleReminder:\n+                state.vehicleReminder!.copyWith(notificationsRCA: notifications),\n+          ),\n+        );\n+        break;\n+      case VehicleNotificationType.CASCO:\n+        emit(\n+          state.copyWith(\n+            vehicleReminder:\n+                state.vehicleReminder!.copyWith(notificationsCASCO: notifications),\n+          ),\n+        );\n+        break;\n+      case VehicleNotificationType.Rovinieta:\n+        emit(\n+          state.copyWith(\n+            vehicleReminder:\n+                state.vehicleReminder!.copyWith(notificationsRovinieta: notifications),\n+          ),\n+        );\n+        break;\n+      case VehicleNotificationType.Tahograf:\n+        emit(\n+          state.copyWith(\n+            vehicleReminder:\n+                state.vehicleReminder!.copyWith(notificationsTahograf: notifications),\n+          ),\n+        );\n+        break;\n+    }\n   }\n \n-  void updateNotificationsTahograf(List<NotificationModel> notifications) {\n+  /// Adds a new notification\n+  void addNotification({\n+    required VehicleNotificationType type,\n+    required NotificationModel notification,\n+  }) {\n     if (state.vehicleReminder == null) return;\n-    emit(\n-      state.copyWith(\n-        vehicleReminder: state.vehicleReminder!.copyWith(\n-          notificationsTahograf: notifications,\n-        ),\n-      ),\n-    );\n-  }\n \n-  void setVehicleReminder(VehicleReminder vehicleReminder) {\n-    emit(state.copyWith(vehicleReminder: vehicleReminder));\n+    final updatedNotifications = List<NotificationModel>.from(\n+      _getNotificationsByType(type),\n+    )..add(notification);\n+\n+    updateNotifications(type: type, notifications: updatedNotifications);\n   }\n \n-  saveChanges() {}\n+  /// Removes a notification by index\n+  void removeNotification({\n+    required VehicleNotificationType type,\n+    required int index,\n+  }) {\n+    if (state.vehicleReminder == null) return;\n \n-  updateExpirationDateITP(DateTime? date) {}\n+    final updatedNotifications = List<NotificationModel>.from(\n+      _getNotificationsByType(type),\n+    )..removeAt(index);\n \n-  generateUniqueNotificationId() {}\n+    updateNotifications(type: type, notifications: updatedNotifications);\n+  }\n \n-  void addNotification(VehicleNotificationType itp, DateTime date, bool sms,\n-      bool email, bool push, int notificationId) {}\n+  /// Helper to get notifications by type\n+  List<NotificationModel> _getNotificationsByType(VehicleNotificationType type) {\n+    switch (type) {\n+      case VehicleNotificationType.ITP:\n+        return state.vehicleReminder?.notificationsITP ?? [];\n+      case VehicleNotificationType.RCA:\n+        return state.vehicleReminder?.notificationsRCA ?? [];\n+      case VehicleNotificationType.CASCO:\n+        return state.vehicleReminder?.notificationsCASCO ?? [];\n+      case VehicleNotificationType.Rovinieta:\n+        return state.vehicleReminder?.notificationsRovinieta ?? [];\n+      case VehicleNotificationType.Tahograf:\n+        return state.vehicleReminder?.notificationsTahograf ?? [];\n+    }\n+  }\n \n-  removeNotification(VehicleNotificationType itp, int index) {}\n-\n-  updateExpirationDateRCA(DateTime? date) {}\n-\n-  updateExpirationDateCASCO(DateTime? date) {}\n-\n-  updateExpirationDateRovinieta(DateTime? date) {}\n-\n-  updateExpirationDateTahograf(DateTime? date) {}\n-}\n+  /// Saves the changes (placeholder implementation)\n+  Future<void> saveChanges() async {\n+    // Add your logic to persist the updated `vehicleReminder` to Firestore or another backend.\n+    print('Vehicle reminder updated: ${state.vehicleReminder}');\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737291476693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,146 +7,111 @@\n class EditVehicleReminderCubit extends Cubit<EditVehicleReminderState> {\n   EditVehicleReminderCubit()\n       : super(const EditVehicleReminderState(vehicleReminder: null));\n \n-  /// Initializes the vehicle reminder with the provided data\n+  /// Initialize the vehicle reminder\n   void initializeReminder(VehicleReminder reminder) {\n     emit(state.copyWith(vehicleReminder: reminder));\n   }\n \n-  /// Updates expiration dates\n+  /// Updates the expiration date for a given type\n   void updateExpirationDate({\n     required VehicleNotificationType type,\n     DateTime? date,\n   }) {\n     if (state.vehicleReminder == null) return;\n \n-    switch (type) {\n-      case VehicleNotificationType.ITP:\n-        emit(\n-          state.copyWith(\n-            vehicleReminder:\n-                state.vehicleReminder!.copyWith(expirationDateITP: date),\n-          ),\n-        );\n-        break;\n-      case VehicleNotificationType.RCA:\n-        emit(\n-          state.copyWith(\n-            vehicleReminder:\n-                state.vehicleReminder!.copyWith(expirationDateRCA: date),\n-          ),\n-        );\n-        break;\n-      case VehicleNotificationType.CASCO:\n-        emit(\n-          state.copyWith(\n-            vehicleReminder:\n-                state.vehicleReminder!.copyWith(expirationDateCASCO: date),\n-          ),\n-        );\n-        break;\n-      case VehicleNotificationType.Rovinieta:\n-        emit(\n-          state.copyWith(\n-            vehicleReminder:\n-                state.vehicleReminder!.copyWith(expirationDateRovinieta: date),\n-          ),\n-        );\n-        break;\n-      case VehicleNotificationType.Tahograf:\n-        emit(\n-          state.copyWith(\n-            vehicleReminder:\n-                state.vehicleReminder!.copyWith(expirationDateTahograf: date),\n-          ),\n-        );\n-        break;\n-    }\n+    final updatedReminder = state.vehicleReminder!.copyWith(\n+      expirationDateITP:\n+          type == VehicleNotificationType.ITP ? date : state.vehicleReminder!.expirationDateITP,\n+      expirationDateRCA:\n+          type == VehicleNotificationType.RCA ? date : state.vehicleReminder!.expirationDateRCA,\n+      expirationDateCASCO:\n+          type == VehicleNotificationType.CASCO ? date : state.vehicleReminder!.expirationDateCASCO,\n+      expirationDateRovinieta:\n+          type == VehicleNotificationType.Rovinieta ? date : state.vehicleReminder!.expirationDateRovinieta,\n+      expirationDateTahograf:\n+          type == VehicleNotificationType.Tahograf ? date : state.vehicleReminder!.expirationDateTahograf,\n+    );\n+\n+    emit(state.copyWith(vehicleReminder: updatedReminder));\n   }\n \n-  /// Updates notifications\n-  void updateNotifications({\n-    required VehicleNotificationType type,\n-    required List<NotificationModel> notifications,\n-  }) {\n+  /// Adds a notification for a specific type\n+  void addNotification(\n+    VehicleNotificationType type,\n+    DateTime date,\n+    bool sms,\n+    bool email,\n+    bool push,\n+    int notificationId,\n+  ) {\n     if (state.vehicleReminder == null) return;\n \n-    switch (type) {\n-      case VehicleNotificationType.ITP:\n-        emit(\n-          state.copyWith(\n-            vehicleReminder: state.vehicleReminder!\n-                .copyWith(notificationsITP: notifications),\n-          ),\n-        );\n-        break;\n-      case VehicleNotificationType.RCA:\n-        emit(\n-          state.copyWith(\n-            vehicleReminder: state.vehicleReminder!\n-                .copyWith(notificationsRCA: notifications),\n-          ),\n-        );\n-        break;\n-      case VehicleNotificationType.CASCO:\n-        emit(\n-          state.copyWith(\n-            vehicleReminder: state.vehicleReminder!\n-                .copyWith(notificationsCASCO: notifications),\n-          ),\n-        );\n-        break;\n-      case VehicleNotificationType.Rovinieta:\n-        emit(\n-          state.copyWith(\n-            vehicleReminder: state.vehicleReminder!\n-                .copyWith(notificationsRovinieta: notifications),\n-          ),\n-        );\n-        break;\n-      case VehicleNotificationType.Tahograf:\n-        emit(\n-          state.copyWith(\n-            vehicleReminder: state.vehicleReminder!\n-                .copyWith(notificationsTahograf: notifications),\n-          ),\n-        );\n-        break;\n-    }\n+    final notification = NotificationModel(\n+      date: date,\n+      sms: sms,\n+      email: email,\n+      push: push,\n+      notificationId: notificationId,\n+    );\n+\n+    final updatedNotifications = _getNotificationsByType(type)\n+      ..add(notification);\n+\n+    _updateNotifications(type, updatedNotifications);\n   }\n \n-  /// Adds a new notification\n-  void addNotification({\n-    required VehicleNotificationType type,\n-    required NotificationModel notification,\n-  }) {\n+  /// Removes a notification by index for a specific type\n+  void removeNotification(VehicleNotificationType type, int index) {\n     if (state.vehicleReminder == null) return;\n \n     final updatedNotifications = List<NotificationModel>.from(\n       _getNotificationsByType(type),\n-    )..add(notification);\n+    )..removeAt(index);\n \n-    updateNotifications(type: type, notifications: updatedNotifications);\n+    _updateNotifications(type, updatedNotifications);\n   }\n \n-  /// Removes a notification by index\n-  void removeNotification({\n-    required VehicleNotificationType type,\n-    required int index,\n-  }) {\n+  /// Generates a unique notification ID\n+  Future<int> generateUniqueNotificationId() async {\n+    // Simulate unique ID generation\n+    return DateTime.now().millisecondsSinceEpoch;\n+  }\n+\n+  /// Saves the updated vehicle reminder (implement your save logic here)\n+  Future<void> saveChanges() async {\n+    // Simulate saving process\n+    print('Saving vehicle reminder: ${state.vehicleReminder}');\n+  }\n+\n+  /// Helper: Updates notifications for a specific type\n+  void _updateNotifications(VehicleNotificationType type, List<NotificationModel> notifications) {\n     if (state.vehicleReminder == null) return;\n \n-    final updatedNotifications = List<NotificationModel>.from(\n-      _getNotificationsByType(type),\n-    )..removeAt(index);\n+    final updatedReminder = state.vehicleReminder!.copyWith(\n+      notificationsITP: type == VehicleNotificationType.ITP\n+          ? notifications\n+          : state.vehicleReminder!.notificationsITP,\n+      notificationsRCA: type == VehicleNotificationType.RCA\n+          ? notifications\n+          : state.vehicleReminder!.notificationsRCA,\n+      notificationsCASCO: type == VehicleNotificationType.CASCO\n+          ? notifications\n+          : state.vehicleReminder!.notificationsCASCO,\n+      notificationsRovinieta: type == VehicleNotificationType.Rovinieta\n+          ? notifications\n+          : state.vehicleReminder!.notificationsRovinieta,\n+      notificationsTahograf: type == VehicleNotificationType.Tahograf\n+          ? notifications\n+          : state.vehicleReminder!.notificationsTahograf,\n+    );\n \n-    updateNotifications(type: type, notifications: updatedNotifications);\n+    emit(state.copyWith(vehicleReminder: updatedReminder));\n   }\n \n-  /// Helper to get notifications by type\n-  List<NotificationModel> _getNotificationsByType(\n-      VehicleNotificationType type) {\n+  /// Helper: Retrieves notifications for a specific type\n+  List<NotificationModel> _getNotificationsByType(VehicleNotificationType type) {\n     switch (type) {\n       case VehicleNotificationType.ITP:\n         return state.vehicleReminder?.notificationsITP ?? [];\n       case VehicleNotificationType.RCA:\n@@ -158,11 +123,5 @@\n       case VehicleNotificationType.Tahograf:\n         return state.vehicleReminder?.notificationsTahograf ?? [];\n     }\n   }\n-\n-  /// Saves the changes (placeholder implementation)\n-  Future<void> saveChanges() async {\n-    // Add your logic to persist the updated `vehicleReminder` to Firestore or another backend.\n-    print('Vehicle reminder updated: ${state.vehicleReminder}');\n-  }\n-}\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1737291120335,
            "name": "Commit-0",
            "content": "import 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:auto_asig/core/models/vehicle_reminder.dart';\nimport 'package:auto_asig/core/models/notification_model.dart';\nimport 'edit_vehicle_reminder_state.dart';\n\nclass EditVehicleReminderCubit extends Cubit<EditVehicleReminderState> {\n  EditVehicleReminderCubit()\n      : super(const EditVehicleReminderState(vehicleReminder: null));\n\n  get updateRegistrationNumber => null;\n\n  get updateCarModel => null;\n\n  void initializeReminder(VehicleReminder reminder) {\n    emit(state.copyWith(vehicleReminder: reminder));\n  }\n\n  void updateNotificationsITP(List<NotificationModel> notifications) {\n    if (state.vehicleReminder == null) return;\n    emit(\n      state.copyWith(\n        vehicleReminder: state.vehicleReminder!.copyWith(\n          notificationsITP: notifications,\n        ),\n      ),\n    );\n  }\n\n  void updateNotificationsRCA(List<NotificationModel> notifications) {\n    if (state.vehicleReminder == null) return;\n    emit(\n      state.copyWith(\n        vehicleReminder: state.vehicleReminder!.copyWith(\n          notificationsRCA: notifications,\n        ),\n      ),\n    );\n  }\n\n  void updateNotificationsCASCO(List<NotificationModel> notifications) {\n    if (state.vehicleReminder == null) return;\n    emit(\n      state.copyWith(\n        vehicleReminder: state.vehicleReminder!.copyWith(\n          notificationsCASCO: notifications,\n        ),\n      ),\n    );\n  }\n\n  void updateNotificationsRovinieta(List<NotificationModel> notifications) {\n    if (state.vehicleReminder == null) return;\n    emit(\n      state.copyWith(\n        vehicleReminder: state.vehicleReminder!.copyWith(\n          notificationsRovinieta: notifications,\n        ),\n      ),\n    );\n  }\n\n  void updateNotificationsTahograf(List<NotificationModel> notifications) {\n    if (state.vehicleReminder == null) return;\n    emit(\n      state.copyWith(\n        vehicleReminder: state.vehicleReminder!.copyWith(\n          notificationsTahograf: notifications,\n        ),\n      ),\n    );\n  }\n\n  void setVehicleReminder(VehicleReminder vehicleReminder) {\n    emit(state.copyWith(vehicleReminder: vehicleReminder));\n  }\n\n  saveChanges() {}\n\n  updateExpirationDateITP(DateTime? date) {}\n}\n"
        }
    ]
}