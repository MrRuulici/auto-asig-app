{
    "sourceFile": "lib/feature/cars_reg/widgets/expiration_section.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1730713871643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730714164536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,17 @@\n     required this.addNotification,\r\n     required this.removeNotification,\r\n   });\r\n \r\n+  // Method to calculate progress (0 to 1 scale) based on expiration date\r\n+  double _calculateProgress() {\r\n+    if (selectedDate == null) return 0.0;\r\n+    final today = DateTime.now();\r\n+    final daysTotal = 60; // Assuming a 60-day threshold for full progress\r\n+    final daysRemaining = selectedDate!.difference(today).inDays;\r\n+    return (daysRemaining > daysTotal ? daysTotal : daysRemaining) / daysTotal;\r\n+  }\r\n+\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Column(\r\n       crossAxisAlignment: CrossAxisAlignment.start,\r\n@@ -37,8 +46,36 @@\n           label: label,\r\n           selectedDate: selectedDate,\r\n           onDateSelected: updateDate,\r\n         ),\r\n+        const SizedBox(height: 8),\r\n+        \r\n+        // Progress bar for expiration\r\n+        if (selectedDate != null) \r\n+          Column(\r\n+            crossAxisAlignment: CrossAxisAlignment.start,\r\n+            children: [\r\n+              const Text(\r\n+                'Progress until expiration:',\r\n+                style: TextStyle(fontWeight: FontWeight.bold),\r\n+              ),\r\n+              const SizedBox(height: 4),\r\n+              ClipRRect(\r\n+                borderRadius: BorderRadius.circular(8),\r\n+                child: LinearProgressIndicator(\r\n+                  value: _calculateProgress(),\r\n+                  minHeight: 16,\r\n+                  backgroundColor: Colors.grey[200],\r\n+                  valueColor: AlwaysStoppedAnimation<Color>(\r\n+                    _getProgressColor(_calculateProgress()),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+              const SizedBox(height: 16),\r\n+            ],\r\n+          ),\r\n+\r\n+        // Notifications list and add button\r\n         for (int i = 0; i < notifications.length; i++)\r\n           NotificationItem(\r\n             index: i,\r\n             selectedDate: notifications[i].date,\r\n@@ -77,5 +114,12 @@\n         const SizedBox(height: 20),\r\n       ],\r\n     );\r\n   }\r\n+\r\n+  // Method to determine progress bar color based on progress value\r\n+  Color _getProgressColor(double progress) {\r\n+    if (progress >= 1.0) return Colors.green;\r\n+    if (progress >= 0.33) return const Color.fromARGB(255, 254, 185, 44);\r\n+    return Colors.red;\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1730714286760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,18 @@\n     final daysRemaining = selectedDate!.difference(today).inDays;\r\n     return (daysRemaining > daysTotal ? daysTotal : daysRemaining) / daysTotal;\r\n   }\r\n \r\n+  // Calculate the remaining days\r\n+  int _getRemainingDays() {\r\n+    if (selectedDate == null) return 0;\r\n+    return selectedDate!.difference(DateTime.now()).inDays;\r\n+  }\r\n+\r\n   @override\r\n   Widget build(BuildContext context) {\r\n+    final int remainingDays = _getRemainingDays();\r\n+\r\n     return Column(\r\n       crossAxisAlignment: CrossAxisAlignment.start,\r\n       children: [\r\n         DatePickerField(\r\n@@ -47,17 +55,19 @@\n           selectedDate: selectedDate,\r\n           onDateSelected: updateDate,\r\n         ),\r\n         const SizedBox(height: 8),\r\n-\r\n-        // Progress bar for expiration\r\n-        if (selectedDate != null)\r\n+        \r\n+        // Progress bar with remaining days label\r\n+        if (selectedDate != null) \r\n           Column(\r\n             crossAxisAlignment: CrossAxisAlignment.start,\r\n             children: [\r\n-              const Text(\r\n-                'Progress until expiration:',\r\n-                style: TextStyle(fontWeight: FontWeight.bold),\r\n+              Text(\r\n+                remainingDays > 0\r\n+                    ? 'Timp rămas: $remainingDays zile'\r\n+                    : 'Expirat',\r\n+                style: const TextStyle(fontWeight: FontWeight.bold),\r\n               ),\r\n               const SizedBox(height: 4),\r\n               ClipRRect(\r\n                 borderRadius: BorderRadius.circular(8),\r\n"
                },
                {
                    "date": 1730714325263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,13 +61,16 @@\n         if (selectedDate != null)\r\n           Column(\r\n             crossAxisAlignment: CrossAxisAlignment.start,\r\n             children: [\r\n-              Text(\r\n-                remainingDays > 0\r\n-                    ? 'Timp rămas: $remainingDays zile'\r\n-                    : 'Expirat',\r\n-                style: const TextStyle(fontWeight: FontWeight.bold),\r\n+              Padding(\r\n+                padding: const EdgeInsets.only(left: 10.0),\r\n+                child: Text(\r\n+                  remainingDays > 0\r\n+                      ? 'Timp rămas: $remainingDays zile'\r\n+                      : 'Expirat',\r\n+                  style: const TextStyle(fontWeight: FontWeight.bold),\r\n+                ),\r\n               ),\r\n               const SizedBox(height: 4),\r\n               ClipRRect(\r\n                 borderRadius: BorderRadius.circular(8),\r\n"
                }
            ],
            "date": 1730713871643,
            "name": "Commit-0",
            "content": "// ExpirationSection.dart\r\n\r\nimport 'package:auto_asig/core/data/constants.dart';\r\nimport 'package:auto_asig/core/models/notification_model.dart';\r\nimport 'package:auto_asig/core/widgets/date_picker_field.dart';\r\nimport 'package:auto_asig/core/widgets/notification_item.dart';\r\nimport 'package:auto_asig/feature/cars_reg/cubit/car_info_cubit.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\n\r\nclass ExpirationSection extends StatelessWidget {\r\n  final String label;\r\n  final VehicleNotificationType type;\r\n  final DateTime? selectedDate;\r\n  final void Function(DateTime) updateDate;\r\n  final List<NotificationModel> notifications;\r\n  final void Function(DateTime, bool, bool, bool) addNotification;\r\n  final void Function(int) removeNotification;\r\n\r\n  const ExpirationSection({\r\n    super.key,\r\n    required this.label,\r\n    required this.type,\r\n    required this.selectedDate,\r\n    required this.updateDate,\r\n    required this.notifications,\r\n    required this.addNotification,\r\n    required this.removeNotification,\r\n  });\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      crossAxisAlignment: CrossAxisAlignment.start,\r\n      children: [\r\n        DatePickerField(\r\n          label: label,\r\n          selectedDate: selectedDate,\r\n          onDateSelected: updateDate,\r\n        ),\r\n        for (int i = 0; i < notifications.length; i++)\r\n          NotificationItem(\r\n            index: i,\r\n            selectedDate: notifications[i].date,\r\n            sms: notifications[i].sms,\r\n            email: notifications[i].email,\r\n            push: notifications[i].push,\r\n            onNotificationUpdate: (date, sms, email, push) {\r\n              context.read<CarInfoCubit>().updateNotification(\r\n                    type,\r\n                    i,\r\n                    date,\r\n                    sms,\r\n                    email,\r\n                    push,\r\n                  );\r\n            },\r\n            onNotificationRemove: () => removeNotification(i),\r\n          ),\r\n        TextButton.icon(\r\n          onPressed: () {\r\n            if (selectedDate != null) {\r\n              addNotification(\r\n                selectedDate!.subtract(const Duration(days: 1)),\r\n                false,\r\n                false,\r\n                true,\r\n              );\r\n            }\r\n          },\r\n          icon: const Icon(Icons.add, color: Colors.indigoAccent),\r\n          label: const Text(\r\n            'Adaugă notificare',\r\n            style: TextStyle(color: Colors.indigoAccent),\r\n          ),\r\n        ),\r\n        const SizedBox(height: 20),\r\n      ],\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}