{
    "sourceFile": "lib/feature/cars_reg/widgets/car_notification_item.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1729360561363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1729708839271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,14 +7,14 @@\n   final void Function(DateTime) onNotificationUpdate; // New parameter\r\n   final VoidCallback onNotificationRemove;\r\n \r\n   const NotificationItem({\r\n-    Key? key,\r\n+    super.key,\r\n     required this.index,\r\n     required this.selectedDate,\r\n     required this.onNotificationUpdate, // Accepting the callback\r\n     required this.onNotificationRemove,\r\n-  }) : super(key: key);\r\n+  });\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Card(\r\n"
                },
                {
                    "date": 1729708853425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,16 +3,16 @@\n \r\n class NotificationItem extends StatelessWidget {\r\n   final int index;\r\n   final DateTime selectedDate;\r\n-  final void Function(DateTime) onNotificationUpdate; // New parameter\r\n+  final void Function(DateTime) onNotificationUpdate; \r\n   final VoidCallback onNotificationRemove;\r\n \r\n   const NotificationItem({\r\n     super.key,\r\n     required this.index,\r\n     required this.selectedDate,\r\n-    required this.onNotificationUpdate, // Accepting the callback\r\n+    required this.onNotificationUpdate,\r\n     required this.onNotificationRemove,\r\n   });\r\n \r\n   @override\r\n"
                },
                {
                    "date": 1729708864755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \r\n class NotificationItem extends StatelessWidget {\r\n   final int index;\r\n   final DateTime selectedDate;\r\n-  final void Function(DateTime) onNotificationUpdate; \r\n+  final void Function(DateTime) onNotificationUpdate;\r\n   final VoidCallback onNotificationRemove;\r\n \r\n   const NotificationItem({\r\n     super.key,\r\n@@ -43,24 +43,29 @@\n               },\r\n               borderRadius: BorderRadius.circular(8),\r\n               splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n               child: Container(\r\n-                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),\r\n+                padding:\r\n+                    const EdgeInsets.symmetric(horizontal: 12, vertical: 8),\r\n                 decoration: BoxDecoration(\r\n-                  color: Colors.indigoAccent.withOpacity(0.1), // Subtle background\r\n+                  color:\r\n+                      Colors.indigoAccent.withOpacity(0.1), // Subtle background\r\n                   borderRadius: BorderRadius.circular(8),\r\n                 ),\r\n                 child: Row(\r\n                   children: [\r\n-                    const Icon(Icons.calendar_today_outlined, color: Colors.indigoAccent),\r\n+                    const Icon(Icons.calendar_today_outlined,\r\n+                        color: Colors.indigoAccent),\r\n                     const SizedBox(width: 8),\r\n                     Text(\r\n-                      DateFormat('dd.MM.yyyy').format(selectedDate), // Updated format to dd.MM.yyyy\r\n+                      DateFormat('dd.MM.yyyy')\r\n+                          .format(selectedDate), // Updated format to dd.MM.yyyy\r\n                       style: const TextStyle(\r\n                         fontSize: 16,\r\n                         color: Colors.indigoAccent,\r\n                         fontWeight: FontWeight.bold,\r\n-                        decoration: TextDecoration.underline, // Underline for interactivity\r\n+                        decoration: TextDecoration\r\n+                            .underline, // Underline for interactivity\r\n                       ),\r\n                     ),\r\n                   ],\r\n                 ),\r\n@@ -88,9 +93,10 @@\n               },\r\n               borderRadius: BorderRadius.circular(8),\r\n               splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n               child: Container(\r\n-                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),\r\n+                padding:\r\n+                    const EdgeInsets.symmetric(horizontal: 12, vertical: 8),\r\n                 decoration: BoxDecoration(\r\n                   color: Colors.indigoAccent.withOpacity(0.1),\r\n                   borderRadius: BorderRadius.circular(8),\r\n                 ),\r\n@@ -115,9 +121,10 @@\n             // Remove Notification Button\r\n             Align(\r\n               alignment: Alignment.centerRight,\r\n               child: TextButton.icon(\r\n-                onPressed: onNotificationRemove, // Using the callback for removing\r\n+                onPressed:\r\n+                    onNotificationRemove, // Using the callback for removing\r\n                 icon: const Icon(Icons.delete_outline, color: Colors.redAccent),\r\n                 label: const Text(\r\n                   'Remove',\r\n                   style: TextStyle(\r\n"
                },
                {
                    "date": 1729709022364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import 'package:flutter/material.dart';\r\n import 'package:intl/intl.dart';\r\n \r\n-class NotificationItem extends StatelessWidget {\r\n+class NotificationItem extends StatefulWidget {\r\n   final int index;\r\n   final DateTime selectedDate;\r\n   final void Function(DateTime) onNotificationUpdate;\r\n   final VoidCallback onNotificationRemove;\r\n@@ -15,8 +15,17 @@\n     required this.onNotificationRemove,\r\n   });\r\n \r\n   @override\r\n+  _NotificationItemState createState() => _NotificationItemState();\r\n+}\r\n+\r\n+class _NotificationItemState extends State<NotificationItem> {\r\n+  bool isSmsSelected = false;\r\n+  bool isEmailSelected = false;\r\n+  bool isPushSelected = false;\r\n+\r\n+  @override\r\n   Widget build(BuildContext context) {\r\n     return Card(\r\n       margin: const EdgeInsets.symmetric(vertical: 8),\r\n       elevation: 3,\r\n@@ -32,14 +41,14 @@\n             InkWell(\r\n               onTap: () async {\r\n                 DateTime? newDate = await showDatePicker(\r\n                   context: context,\r\n-                  initialDate: selectedDate,\r\n+                  initialDate: widget.selectedDate,\r\n                   firstDate: DateTime.now(),\r\n                   lastDate: DateTime(2101),\r\n                 );\r\n                 if (newDate != null) {\r\n-                  onNotificationUpdate(newDate); // Using the callback\r\n+                  widget.onNotificationUpdate(newDate); // Using the callback\r\n                 }\r\n               },\r\n               borderRadius: BorderRadius.circular(8),\r\n               splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n@@ -57,9 +66,9 @@\n                         color: Colors.indigoAccent),\r\n                     const SizedBox(width: 8),\r\n                     Text(\r\n                       DateFormat('dd.MM.yyyy')\r\n-                          .format(selectedDate), // Updated format to dd.MM.yyyy\r\n+                          .format(widget.selectedDate), // Updated format to dd.MM.yyyy\r\n                       style: const TextStyle(\r\n                         fontSize: 16,\r\n                         color: Colors.indigoAccent,\r\n                         fontWeight: FontWeight.bold,\r\n@@ -77,19 +86,19 @@\n             InkWell(\r\n               onTap: () async {\r\n                 TimeOfDay? time = await showTimePicker(\r\n                   context: context,\r\n-                  initialTime: TimeOfDay.fromDateTime(selectedDate),\r\n+                  initialTime: TimeOfDay.fromDateTime(widget.selectedDate),\r\n                 );\r\n                 if (time != null) {\r\n                   DateTime updatedDateTime = DateTime(\r\n-                    selectedDate.year,\r\n-                    selectedDate.month,\r\n-                    selectedDate.day,\r\n+                    widget.selectedDate.year,\r\n+                    widget.selectedDate.month,\r\n+                    widget.selectedDate.day,\r\n                     time.hour,\r\n                     time.minute,\r\n                   );\r\n-                  onNotificationUpdate(updatedDateTime); // Using the callback\r\n+                  widget.onNotificationUpdate(updatedDateTime); // Using the callback\r\n                 }\r\n               },\r\n               borderRadius: BorderRadius.circular(8),\r\n               splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n@@ -104,9 +113,9 @@\n                   children: [\r\n                     const Icon(Icons.access_time, color: Colors.indigoAccent),\r\n                     const SizedBox(width: 8),\r\n                     Text(\r\n-                      DateFormat('HH:mm').format(selectedDate),\r\n+                      DateFormat('HH:mm').format(widget.selectedDate),\r\n                       style: const TextStyle(\r\n                         fontSize: 16,\r\n                         color: Colors.indigoAccent,\r\n                         fontWeight: FontWeight.bold,\r\n@@ -115,16 +124,64 @@\n                   ],\r\n                 ),\r\n               ),\r\n             ),\r\n+            const SizedBox(height: 20),\r\n+\r\n+            // Checkbox Row for SMS, Email, Push Notifications\r\n+            Row(\r\n+              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+              children: [\r\n+                Row(\r\n+                  children: [\r\n+                    Checkbox(\r\n+                      value: isSmsSelected,\r\n+                      onChanged: (bool? value) {\r\n+                        setState(() {\r\n+                          isSmsSelected = value ?? false;\r\n+                        });\r\n+                      },\r\n+                    ),\r\n+                    const Text('SMS'),\r\n+                  ],\r\n+                ),\r\n+                Row(\r\n+                  children: [\r\n+                    Checkbox(\r\n+                      value: isEmailSelected,\r\n+                      onChanged: (bool? value) {\r\n+                        setState(() {\r\n+                          isEmailSelected = value ?? false;\r\n+                        });\r\n+                      },\r\n+                    ),\r\n+                    const Text('Email'),\r\n+                  ],\r\n+                ),\r\n+                Row(\r\n+                  children: [\r\n+                    Checkbox(\r\n+                      value: isPushSelected,\r\n+                      onChanged: (bool? value) {\r\n+                        setState(() {\r\n+                          isPushSelected = value ?? false;\r\n+                        });\r\n+                      },\r\n+                    ),\r\n+                    const Text('Push Notifications'),\r\n+                  ],\r\n+                ),\r\n+              ],\r\n+            ),\r\n+\r\n             const Divider(height: 24),\r\n \r\n             // Remove Notification Button\r\n             Align(\r\n               alignment: Alignment.centerRight,\r\n               child: TextButton.icon(\r\n                 onPressed:\r\n-                    onNotificationRemove, // Using the callback for removing\r\n+                    widget.onNotificationRemove, // Using the callback for removing\r\n                 icon: const Icon(Icons.delete_outline, color: Colors.redAccent),\r\n                 label: const Text(\r\n                   'Remove',\r\n                   style: TextStyle(\r\n"
                },
                {
                    "date": 1729709034506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,10 +65,10 @@\n                     const Icon(Icons.calendar_today_outlined,\r\n                         color: Colors.indigoAccent),\r\n                     const SizedBox(width: 8),\r\n                     Text(\r\n-                      DateFormat('dd.MM.yyyy')\r\n-                          .format(widget.selectedDate), // Updated format to dd.MM.yyyy\r\n+                      DateFormat('dd.MM.yyyy').format(\r\n+                          widget.selectedDate), // Updated format to dd.MM.yyyy\r\n                       style: const TextStyle(\r\n                         fontSize: 16,\r\n                         color: Colors.indigoAccent,\r\n                         fontWeight: FontWeight.bold,\r\n@@ -96,9 +96,10 @@\n                     widget.selectedDate.day,\r\n                     time.hour,\r\n                     time.minute,\r\n                   );\r\n-                  widget.onNotificationUpdate(updatedDateTime); // Using the callback\r\n+                  widget.onNotificationUpdate(\r\n+                      updatedDateTime); // Using the callback\r\n                 }\r\n               },\r\n               borderRadius: BorderRadius.circular(8),\r\n               splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n@@ -178,10 +179,10 @@\n             // Remove Notification Button\r\n             Align(\r\n               alignment: Alignment.centerRight,\r\n               child: TextButton.icon(\r\n-                onPressed:\r\n-                    widget.onNotificationRemove, // Using the callback for removing\r\n+                onPressed: widget\r\n+                    .onNotificationRemove, // Using the callback for removing\r\n                 icon: const Icon(Icons.delete_outline, color: Colors.redAccent),\r\n                 label: const Text(\r\n                   'Remove',\r\n                   style: TextStyle(\r\n"
                },
                {
                    "date": 1729709068653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n             ),\r\n             const SizedBox(height: 20),\r\n \r\n             // Checkbox Row for SMS, Email, Push Notifications\r\n-            Row(\r\n+            Column(\r\n               mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n               children: [\r\n                 Row(\r\n                   children: [\r\n"
                },
                {
                    "date": 1729709383070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,26 @@\n import 'package:flutter/material.dart';\r\n import 'package:intl/intl.dart';\r\n \r\n-class NotificationItem extends StatefulWidget {\r\n+class CarNotificationItem extends StatefulWidget {\r\n   final int index;\r\n   final DateTime selectedDate;\r\n   final void Function(DateTime) onNotificationUpdate;\r\n   final VoidCallback onNotificationRemove;\r\n \r\n-  const NotificationItem({\r\n+  const CarNotificationItem({\r\n     super.key,\r\n     required this.index,\r\n     required this.selectedDate,\r\n     required this.onNotificationUpdate,\r\n     required this.onNotificationRemove,\r\n   });\r\n \r\n   @override\r\n-  _NotificationItemState createState() => _NotificationItemState();\r\n+  _CarNotificationItemState createState() => _CarNotificationItemState();\r\n }\r\n \r\n-class _NotificationItemState extends State<NotificationItem> {\r\n+class _CarNotificationItemState extends State<CarNotificationItem> {\r\n   bool isSmsSelected = false;\r\n   bool isEmailSelected = false;\r\n   bool isPushSelected = false;\r\n \r\n"
                },
                {
                    "date": 1729754553300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n                           isPushSelected = value ?? false;\r\n                         });\r\n                       },\r\n                     ),\r\n-                    const Text('Push Notifications'),\r\n+                    const Text('Notificari Push'),\r\n                   ],\r\n                 ),\r\n               ],\r\n             ),\r\n"
                },
                {
                    "date": 1729754821923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,104 +36,114 @@\n         padding: const EdgeInsets.all(16),\r\n         child: Column(\r\n           crossAxisAlignment: CrossAxisAlignment.start,\r\n           children: [\r\n-            // Date Picker for Notification (Styled as a Button)\r\n-            InkWell(\r\n-              onTap: () async {\r\n-                DateTime? newDate = await showDatePicker(\r\n-                  context: context,\r\n-                  initialDate: widget.selectedDate,\r\n-                  firstDate: DateTime.now(),\r\n-                  lastDate: DateTime(2101),\r\n-                );\r\n-                if (newDate != null) {\r\n-                  widget.onNotificationUpdate(newDate); // Using the callback\r\n-                }\r\n-              },\r\n-              borderRadius: BorderRadius.circular(8),\r\n-              splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n-              child: Container(\r\n-                padding:\r\n-                    const EdgeInsets.symmetric(horizontal: 12, vertical: 8),\r\n-                decoration: BoxDecoration(\r\n-                  color:\r\n-                      Colors.indigoAccent.withOpacity(0.1), // Subtle background\r\n-                  borderRadius: BorderRadius.circular(8),\r\n-                ),\r\n-                child: Row(\r\n-                  children: [\r\n-                    const Icon(Icons.calendar_today_outlined,\r\n-                        color: Colors.indigoAccent),\r\n-                    const SizedBox(width: 8),\r\n-                    Text(\r\n-                      DateFormat('dd.MM.yyyy').format(\r\n-                          widget.selectedDate), // Updated format to dd.MM.yyyy\r\n-                      style: const TextStyle(\r\n-                        fontSize: 16,\r\n-                        color: Colors.indigoAccent,\r\n-                        fontWeight: FontWeight.bold,\r\n-                        decoration: TextDecoration\r\n-                            .underline, // Underline for interactivity\r\n+            // Row for Date Picker and Time Picker\r\n+            Row(\r\n+              children: [\r\n+                Expanded(\r\n+                  flex: 2, // Date picker takes more space\r\n+                  child: InkWell(\r\n+                    onTap: () async {\r\n+                      DateTime? newDate = await showDatePicker(\r\n+                        context: context,\r\n+                        initialDate: widget.selectedDate,\r\n+                        firstDate: DateTime.now(),\r\n+                        lastDate: DateTime(2101),\r\n+                      );\r\n+                      if (newDate != null) {\r\n+                        widget.onNotificationUpdate(\r\n+                            newDate); // Using the callback\r\n+                      }\r\n+                    },\r\n+                    borderRadius: BorderRadius.circular(8),\r\n+                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n+                    child: Container(\r\n+                      padding: const EdgeInsets.symmetric(\r\n+                          horizontal: 12, vertical: 8),\r\n+                      decoration: BoxDecoration(\r\n+                        color: Colors.indigoAccent.withOpacity(0.1),\r\n+                        borderRadius: BorderRadius.circular(8),\r\n                       ),\r\n+                      child: Row(\r\n+                        children: [\r\n+                          const Icon(Icons.calendar_today_outlined,\r\n+                              color: Colors.indigoAccent),\r\n+                          const SizedBox(width: 8),\r\n+                          Text(\r\n+                            DateFormat('dd.MM.yyyy')\r\n+                                .format(widget.selectedDate),\r\n+                            style: const TextStyle(\r\n+                              fontSize: 16,\r\n+                              color: Colors.indigoAccent,\r\n+                              fontWeight: FontWeight.bold,\r\n+                              decoration: TextDecoration.underline,\r\n+                            ),\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n                     ),\r\n-                  ],\r\n+                  ),\r\n                 ),\r\n-              ),\r\n-            ),\r\n-            const SizedBox(height: 20),\r\n-\r\n-            // Time Picker Button\r\n-            InkWell(\r\n-              onTap: () async {\r\n-                TimeOfDay? time = await showTimePicker(\r\n-                  context: context,\r\n-                  initialTime: TimeOfDay.fromDateTime(widget.selectedDate),\r\n-                );\r\n-                if (time != null) {\r\n-                  DateTime updatedDateTime = DateTime(\r\n-                    widget.selectedDate.year,\r\n-                    widget.selectedDate.month,\r\n-                    widget.selectedDate.day,\r\n-                    time.hour,\r\n-                    time.minute,\r\n-                  );\r\n-                  widget.onNotificationUpdate(\r\n-                      updatedDateTime); // Using the callback\r\n-                }\r\n-              },\r\n-              borderRadius: BorderRadius.circular(8),\r\n-              splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n-              child: Container(\r\n-                padding:\r\n-                    const EdgeInsets.symmetric(horizontal: 12, vertical: 8),\r\n-                decoration: BoxDecoration(\r\n-                  color: Colors.indigoAccent.withOpacity(0.1),\r\n-                  borderRadius: BorderRadius.circular(8),\r\n-                ),\r\n-                child: Row(\r\n-                  children: [\r\n-                    const Icon(Icons.access_time, color: Colors.indigoAccent),\r\n-                    const SizedBox(width: 8),\r\n-                    Text(\r\n-                      DateFormat('HH:mm').format(widget.selectedDate),\r\n-                      style: const TextStyle(\r\n-                        fontSize: 16,\r\n-                        color: Colors.indigoAccent,\r\n-                        fontWeight: FontWeight.bold,\r\n+                const SizedBox(\r\n+                    width: 16), // Spacing between date and time picker\r\n+                Expanded(\r\n+                  flex: 1, // Time picker takes less space\r\n+                  child: InkWell(\r\n+                    onTap: () async {\r\n+                      TimeOfDay? time = await showTimePicker(\r\n+                        context: context,\r\n+                        initialTime:\r\n+                            TimeOfDay.fromDateTime(widget.selectedDate),\r\n+                      );\r\n+                      if (time != null) {\r\n+                        DateTime updatedDateTime = DateTime(\r\n+                          widget.selectedDate.year,\r\n+                          widget.selectedDate.month,\r\n+                          widget.selectedDate.day,\r\n+                          time.hour,\r\n+                          time.minute,\r\n+                        );\r\n+                        widget.onNotificationUpdate(\r\n+                            updatedDateTime); // Using the callback\r\n+                      }\r\n+                    },\r\n+                    borderRadius: BorderRadius.circular(8),\r\n+                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n+                    child: Container(\r\n+                      padding: const EdgeInsets.symmetric(\r\n+                          horizontal: 12, vertical: 8),\r\n+                      decoration: BoxDecoration(\r\n+                        color: Colors.indigoAccent.withOpacity(0.1),\r\n+                        borderRadius: BorderRadius.circular(8),\r\n                       ),\r\n+                      child: Row(\r\n+                        children: [\r\n+                          const Icon(Icons.access_time,\r\n+                              color: Colors.indigoAccent),\r\n+                          const SizedBox(width: 8),\r\n+                          Text(\r\n+                            DateFormat('HH:mm').format(widget.selectedDate),\r\n+                            style: const TextStyle(\r\n+                              fontSize: 16,\r\n+                              color: Colors.indigoAccent,\r\n+                              fontWeight: FontWeight.bold,\r\n+                            ),\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n                     ),\r\n-                  ],\r\n+                  ),\r\n                 ),\r\n-              ),\r\n+              ],\r\n             ),\r\n             const SizedBox(height: 20),\r\n \r\n-            // Checkbox Row for SMS, Email, Push Notifications\r\n-            Column(\r\n+            // Checkbox Row for SMS, Email, Push Notifications with text below checkbox\r\n+            Row(\r\n               mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n               children: [\r\n-                Row(\r\n+                Column(\r\n                   children: [\r\n                     Checkbox(\r\n                       value: isSmsSelected,\r\n                       onChanged: (bool? value) {\r\n@@ -144,9 +154,9 @@\n                     ),\r\n                     const Text('SMS'),\r\n                   ],\r\n                 ),\r\n-                Row(\r\n+                Column(\r\n                   children: [\r\n                     Checkbox(\r\n                       value: isEmailSelected,\r\n                       onChanged: (bool? value) {\r\n@@ -157,9 +167,9 @@\n                     ),\r\n                     const Text('Email'),\r\n                   ],\r\n                 ),\r\n-                Row(\r\n+                Column(\r\n                   children: [\r\n                     Checkbox(\r\n                       value: isPushSelected,\r\n                       onChanged: (bool? value) {\r\n@@ -167,9 +177,9 @@\n                           isPushSelected = value ?? false;\r\n                         });\r\n                       },\r\n                     ),\r\n-                    const Text('Notificari Push'),\r\n+                    const Text('Push Notifications'),\r\n                   ],\r\n                 ),\r\n               ],\r\n             ),\r\n"
                },
                {
                    "date": 1729754910709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,226 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:intl/intl.dart';\r\n+\r\n+class CarNotificationItem extends StatefulWidget {\r\n+  final int index;\r\n+  final DateTime selectedDate;\r\n+  final void Function(DateTime) onNotificationUpdate;\r\n+  final VoidCallback onNotificationRemove;\r\n+\r\n+  const CarNotificationItem({\r\n+    super.key,\r\n+    required this.index,\r\n+    required this.selectedDate,\r\n+    required this.onNotificationUpdate,\r\n+    required this.onNotificationRemove,\r\n+  });\r\n+\r\n+  @override\r\n+  _CarNotificationItemState createState() => _CarNotificationItemState();\r\n+}\r\n+\r\n+class _CarNotificationItemState extends State<CarNotificationItem> {\r\n+  bool isSmsSelected = false;\r\n+  bool isEmailSelected = false;\r\n+  bool isPushSelected = false;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Card(\r\n+      margin: const EdgeInsets.symmetric(vertical: 8),\r\n+      elevation: 3,\r\n+      shape: RoundedRectangleBorder(\r\n+        borderRadius: BorderRadius.circular(15),\r\n+      ),\r\n+      child: Padding(\r\n+        padding: const EdgeInsets.all(16),\r\n+        child: Column(\r\n+          crossAxisAlignment: CrossAxisAlignment.start,\r\n+          children: [\r\n+            // Row for Date Picker and Time Picker\r\n+            Row(\r\n+              children: [\r\n+                Expanded(\r\n+                  flex: 2, // Date picker takes more space\r\n+                  child: InkWell(\r\n+                    onTap: () async {\r\n+                      DateTime? newDate = await showDatePicker(\r\n+                        context: context,\r\n+                        initialDate: widget.selectedDate,\r\n+                        firstDate: DateTime.now(),\r\n+                        lastDate: DateTime(2101),\r\n+                      );\r\n+                      if (newDate != null) {\r\n+                        widget.onNotificationUpdate(\r\n+                            newDate); // Using the callback\r\n+                      }\r\n+                    },\r\n+                    borderRadius: BorderRadius.circular(8),\r\n+                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n+                    child: Container(\r\n+                      padding: const EdgeInsets.symmetric(\r\n+                          horizontal: 12, vertical: 8),\r\n+                      decoration: BoxDecoration(\r\n+                        color: Colors.indigoAccent.withOpacity(0.1),\r\n+                        borderRadius: BorderRadius.circular(8),\r\n+                      ),\r\n+                      child: Row(\r\n+                        children: [\r\n+                          const Icon(Icons.calendar_today_outlined,\r\n+                              color: Colors.indigoAccent),\r\n+                          const SizedBox(width: 8),\r\n+                          Expanded(\r\n+                            // Ensure text doesn't overflow\r\n+                            child: Text(\r\n+                              DateFormat('dd.MM.yyyy')\r\n+                                  .format(widget.selectedDate),\r\n+                              style: const TextStyle(\r\n+                                fontSize: 16,\r\n+                                color: Colors.indigoAccent,\r\n+                                fontWeight: FontWeight.bold,\r\n+                                decoration: TextDecoration.underline,\r\n+                              ),\r\n+                              overflow:\r\n+                                  TextOverflow.ellipsis, // Handle overflow\r\n+                            ),\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+                const SizedBox(\r\n+                    width: 16), // Spacing between date and time picker\r\n+                Expanded(\r\n+                  flex: 1, // Time picker takes less space\r\n+                  child: InkWell(\r\n+                    onTap: () async {\r\n+                      TimeOfDay? time = await showTimePicker(\r\n+                        context: context,\r\n+                        initialTime:\r\n+                            TimeOfDay.fromDateTime(widget.selectedDate),\r\n+                      );\r\n+                      if (time != null) {\r\n+                        DateTime updatedDateTime = DateTime(\r\n+                          widget.selectedDate.year,\r\n+                          widget.selectedDate.month,\r\n+                          widget.selectedDate.day,\r\n+                          time.hour,\r\n+                          time.minute,\r\n+                        );\r\n+                        widget.onNotificationUpdate(\r\n+                            updatedDateTime); // Using the callback\r\n+                      }\r\n+                    },\r\n+                    borderRadius: BorderRadius.circular(8),\r\n+                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n+                    child: Container(\r\n+                      padding: const EdgeInsets.symmetric(\r\n+                          horizontal: 12, vertical: 8),\r\n+                      decoration: BoxDecoration(\r\n+                        color: Colors.indigoAccent.withOpacity(0.1),\r\n+                        borderRadius: BorderRadius.circular(8),\r\n+                      ),\r\n+                      child: Row(\r\n+                        children: [\r\n+                          const Icon(Icons.access_time,\r\n+                              color: Colors.indigoAccent),\r\n+                          const SizedBox(width: 8),\r\n+                          Text(\r\n+                            DateFormat('HH:mm').format(widget.selectedDate),\r\n+                            style: const TextStyle(\r\n+                              fontSize: 16,\r\n+                              color: Colors.indigoAccent,\r\n+                              fontWeight: FontWeight.bold,\r\n+                            ),\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+            const SizedBox(height: 20),\r\n+\r\n+            // Checkbox Row for SMS, Email, Push Notifications with text below checkbox\r\n+            Row(\r\n+              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+              children: [\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isSmsSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isSmsSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('SMS'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isEmailSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isEmailSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('Email'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isPushSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isPushSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('Push Notifications'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+\r\n+            const Divider(height: 24),\r\n+\r\n+            // Remove Notification Button\r\n+            Align(\r\n+              alignment: Alignment.centerRight,\r\n+              child: TextButton.icon(\r\n+                onPressed: widget\r\n+                    .onNotificationRemove, // Using the callback for removing\r\n+                icon: const Icon(Icons.delete_outline, color: Colors.redAccent),\r\n+                label: const Text(\r\n+                  'Remove',\r\n+                  style: TextStyle(\r\n+                    color: Colors.redAccent,\r\n+                    fontSize: 14,\r\n+                    fontWeight: FontWeight.bold,\r\n+                  ),\r\n+                ),\r\n+                style: TextButton.styleFrom(\r\n+                  padding: EdgeInsets.zero,\r\n+                  tapTargetSize: MaterialTapTargetSize.shrinkWrap,\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1729754929907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,226 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:intl/intl.dart';\r\n+\r\n+class CarNotificationItem extends StatefulWidget {\r\n+  final int index;\r\n+  final DateTime selectedDate;\r\n+  final void Function(DateTime) onNotificationUpdate;\r\n+  final VoidCallback onNotificationRemove;\r\n+\r\n+  const CarNotificationItem({\r\n+    super.key,\r\n+    required this.index,\r\n+    required this.selectedDate,\r\n+    required this.onNotificationUpdate,\r\n+    required this.onNotificationRemove,\r\n+  });\r\n+\r\n+  @override\r\n+  _CarNotificationItemState createState() => _CarNotificationItemState();\r\n+}\r\n+\r\n+class _CarNotificationItemState extends State<CarNotificationItem> {\r\n+  bool isSmsSelected = false;\r\n+  bool isEmailSelected = false;\r\n+  bool isPushSelected = false;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Card(\r\n+      margin: const EdgeInsets.symmetric(vertical: 8),\r\n+      elevation: 3,\r\n+      shape: RoundedRectangleBorder(\r\n+        borderRadius: BorderRadius.circular(15),\r\n+      ),\r\n+      child: Padding(\r\n+        padding: const EdgeInsets.all(16),\r\n+        child: Column(\r\n+          crossAxisAlignment: CrossAxisAlignment.start,\r\n+          children: [\r\n+            // Row for Date Picker and Time Picker\r\n+            Row(\r\n+              children: [\r\n+                Expanded(\r\n+                  flex: 2, // Date picker takes more space\r\n+                  child: InkWell(\r\n+                    onTap: () async {\r\n+                      DateTime? newDate = await showDatePicker(\r\n+                        context: context,\r\n+                        initialDate: widget.selectedDate,\r\n+                        firstDate: DateTime.now(),\r\n+                        lastDate: DateTime(2101),\r\n+                      );\r\n+                      if (newDate != null) {\r\n+                        widget.onNotificationUpdate(\r\n+                            newDate); // Using the callback\r\n+                      }\r\n+                    },\r\n+                    borderRadius: BorderRadius.circular(8),\r\n+                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n+                    child: Container(\r\n+                      padding: const EdgeInsets.symmetric(\r\n+                          horizontal: 12, vertical: 8),\r\n+                      decoration: BoxDecoration(\r\n+                        color: Colors.indigoAccent.withOpacity(0.1),\r\n+                        borderRadius: BorderRadius.circular(8),\r\n+                      ),\r\n+                      child: Row(\r\n+                        children: [\r\n+                          const Icon(Icons.calendar_today_outlined,\r\n+                              color: Colors.indigoAccent),\r\n+                          const SizedBox(width: 8),\r\n+                          Expanded(\r\n+                            // Ensure text doesn't overflow\r\n+                            child: Text(\r\n+                              DateFormat('dd.MM.yyyy')\r\n+                                  .format(widget.selectedDate),\r\n+                              style: const TextStyle(\r\n+                                fontSize: 16,\r\n+                                color: Colors.indigoAccent,\r\n+                                fontWeight: FontWeight.bold,\r\n+                                decoration: TextDecoration.underline,\r\n+                              ),\r\n+                              overflow:\r\n+                                  TextOverflow.ellipsis, // Handle overflow\r\n+                            ),\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+                const SizedBox(\r\n+                    width: 16), // Spacing between date and time picker\r\n+                Expanded(\r\n+                  flex: 1, // Time picker takes less space\r\n+                  child: InkWell(\r\n+                    onTap: () async {\r\n+                      TimeOfDay? time = await showTimePicker(\r\n+                        context: context,\r\n+                        initialTime:\r\n+                            TimeOfDay.fromDateTime(widget.selectedDate),\r\n+                      );\r\n+                      if (time != null) {\r\n+                        DateTime updatedDateTime = DateTime(\r\n+                          widget.selectedDate.year,\r\n+                          widget.selectedDate.month,\r\n+                          widget.selectedDate.day,\r\n+                          time.hour,\r\n+                          time.minute,\r\n+                        );\r\n+                        widget.onNotificationUpdate(\r\n+                            updatedDateTime); // Using the callback\r\n+                      }\r\n+                    },\r\n+                    borderRadius: BorderRadius.circular(8),\r\n+                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n+                    child: Container(\r\n+                      padding: const EdgeInsets.symmetric(\r\n+                          horizontal: 12, vertical: 8),\r\n+                      decoration: BoxDecoration(\r\n+                        color: Colors.indigoAccent.withOpacity(0.1),\r\n+                        borderRadius: BorderRadius.circular(8),\r\n+                      ),\r\n+                      child: Row(\r\n+                        children: [\r\n+                          const Icon(Icons.access_time,\r\n+                              color: Colors.indigoAccent),\r\n+                          const SizedBox(width: 8),\r\n+                          Text(\r\n+                            DateFormat('HH:mm').format(widget.selectedDate),\r\n+                            style: const TextStyle(\r\n+                              fontSize: 16,\r\n+                              color: Colors.indigoAccent,\r\n+                              fontWeight: FontWeight.bold,\r\n+                            ),\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+            const SizedBox(height: 20),\r\n+\r\n+            // Checkbox Row for SMS, Email, Push Notifications with text below checkbox\r\n+            Row(\r\n+              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+              children: [\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isSmsSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isSmsSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('SMS'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isEmailSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isEmailSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('Email'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isPushSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isPushSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('Notificari Push'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+\r\n+            const Divider(height: 24),\r\n+\r\n+            // Remove Notification Button\r\n+            Align(\r\n+              alignment: Alignment.centerRight,\r\n+              child: TextButton.icon(\r\n+                onPressed: widget\r\n+                    .onNotificationRemove, // Using the callback for removing\r\n+                icon: const Icon(Icons.delete_outline, color: Colors.redAccent),\r\n+                label: const Text(\r\n+                  'Remove',\r\n+                  style: TextStyle(\r\n+                    color: Colors.redAccent,\r\n+                    fontSize: 14,\r\n+                    fontWeight: FontWeight.bold,\r\n+                  ),\r\n+                ),\r\n+                style: TextButton.styleFrom(\r\n+                  padding: EdgeInsets.zero,\r\n+                  tapTargetSize: MaterialTapTargetSize.shrinkWrap,\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1729754950303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,445 +223,4 @@\n       ),\r\n     );\r\n   }\r\n }\r\n-import 'package:flutter/material.dart';\r\n-import 'package:intl/intl.dart';\r\n-\r\n-class CarNotificationItem extends StatefulWidget {\r\n-  final int index;\r\n-  final DateTime selectedDate;\r\n-  final void Function(DateTime) onNotificationUpdate;\r\n-  final VoidCallback onNotificationRemove;\r\n-\r\n-  const CarNotificationItem({\r\n-    super.key,\r\n-    required this.index,\r\n-    required this.selectedDate,\r\n-    required this.onNotificationUpdate,\r\n-    required this.onNotificationRemove,\r\n-  });\r\n-\r\n-  @override\r\n-  _CarNotificationItemState createState() => _CarNotificationItemState();\r\n-}\r\n-\r\n-class _CarNotificationItemState extends State<CarNotificationItem> {\r\n-  bool isSmsSelected = false;\r\n-  bool isEmailSelected = false;\r\n-  bool isPushSelected = false;\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Card(\r\n-      margin: const EdgeInsets.symmetric(vertical: 8),\r\n-      elevation: 3,\r\n-      shape: RoundedRectangleBorder(\r\n-        borderRadius: BorderRadius.circular(15),\r\n-      ),\r\n-      child: Padding(\r\n-        padding: const EdgeInsets.all(16),\r\n-        child: Column(\r\n-          crossAxisAlignment: CrossAxisAlignment.start,\r\n-          children: [\r\n-            // Row for Date Picker and Time Picker\r\n-            Row(\r\n-              children: [\r\n-                Expanded(\r\n-                  flex: 2, // Date picker takes more space\r\n-                  child: InkWell(\r\n-                    onTap: () async {\r\n-                      DateTime? newDate = await showDatePicker(\r\n-                        context: context,\r\n-                        initialDate: widget.selectedDate,\r\n-                        firstDate: DateTime.now(),\r\n-                        lastDate: DateTime(2101),\r\n-                      );\r\n-                      if (newDate != null) {\r\n-                        widget.onNotificationUpdate(\r\n-                            newDate); // Using the callback\r\n-                      }\r\n-                    },\r\n-                    borderRadius: BorderRadius.circular(8),\r\n-                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n-                    child: Container(\r\n-                      padding: const EdgeInsets.symmetric(\r\n-                          horizontal: 12, vertical: 8),\r\n-                      decoration: BoxDecoration(\r\n-                        color: Colors.indigoAccent.withOpacity(0.1),\r\n-                        borderRadius: BorderRadius.circular(8),\r\n-                      ),\r\n-                      child: Row(\r\n-                        children: [\r\n-                          const Icon(Icons.calendar_today_outlined,\r\n-                              color: Colors.indigoAccent),\r\n-                          const SizedBox(width: 8),\r\n-                          Expanded(\r\n-                            // Ensure text doesn't overflow\r\n-                            child: Text(\r\n-                              DateFormat('dd.MM.yyyy')\r\n-                                  .format(widget.selectedDate),\r\n-                              style: const TextStyle(\r\n-                                fontSize: 16,\r\n-                                color: Colors.indigoAccent,\r\n-                                fontWeight: FontWeight.bold,\r\n-                                decoration: TextDecoration.underline,\r\n-                              ),\r\n-                              overflow:\r\n-                                  TextOverflow.ellipsis, // Handle overflow\r\n-                            ),\r\n-                          ),\r\n-                        ],\r\n-                      ),\r\n-                    ),\r\n-                  ),\r\n-                ),\r\n-                const SizedBox(\r\n-                    width: 16), // Spacing between date and time picker\r\n-                Expanded(\r\n-                  flex: 1, // Time picker takes less space\r\n-                  child: InkWell(\r\n-                    onTap: () async {\r\n-                      TimeOfDay? time = await showTimePicker(\r\n-                        context: context,\r\n-                        initialTime:\r\n-                            TimeOfDay.fromDateTime(widget.selectedDate),\r\n-                      );\r\n-                      if (time != null) {\r\n-                        DateTime updatedDateTime = DateTime(\r\n-                          widget.selectedDate.year,\r\n-                          widget.selectedDate.month,\r\n-                          widget.selectedDate.day,\r\n-                          time.hour,\r\n-                          time.minute,\r\n-                        );\r\n-                        widget.onNotificationUpdate(\r\n-                            updatedDateTime); // Using the callback\r\n-                      }\r\n-                    },\r\n-                    borderRadius: BorderRadius.circular(8),\r\n-                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n-                    child: Container(\r\n-                      padding: const EdgeInsets.symmetric(\r\n-                          horizontal: 12, vertical: 8),\r\n-                      decoration: BoxDecoration(\r\n-                        color: Colors.indigoAccent.withOpacity(0.1),\r\n-                        borderRadius: BorderRadius.circular(8),\r\n-                      ),\r\n-                      child: Row(\r\n-                        children: [\r\n-                          const Icon(Icons.access_time,\r\n-                              color: Colors.indigoAccent),\r\n-                          const SizedBox(width: 8),\r\n-                          Text(\r\n-                            DateFormat('HH:mm').format(widget.selectedDate),\r\n-                            style: const TextStyle(\r\n-                              fontSize: 16,\r\n-                              color: Colors.indigoAccent,\r\n-                              fontWeight: FontWeight.bold,\r\n-                            ),\r\n-                          ),\r\n-                        ],\r\n-                      ),\r\n-                    ),\r\n-                  ),\r\n-                ),\r\n-              ],\r\n-            ),\r\n-            const SizedBox(height: 20),\r\n-\r\n-            // Checkbox Row for SMS, Email, Push Notifications with text below checkbox\r\n-            Row(\r\n-              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-              children: [\r\n-                Flexible(\r\n-                  child: Column(\r\n-                    children: [\r\n-                      Checkbox(\r\n-                        value: isSmsSelected,\r\n-                        onChanged: (bool? value) {\r\n-                          setState(() {\r\n-                            isSmsSelected = value ?? false;\r\n-                          });\r\n-                        },\r\n-                      ),\r\n-                      const Text('SMS'),\r\n-                    ],\r\n-                  ),\r\n-                ),\r\n-                Flexible(\r\n-                  child: Column(\r\n-                    children: [\r\n-                      Checkbox(\r\n-                        value: isEmailSelected,\r\n-                        onChanged: (bool? value) {\r\n-                          setState(() {\r\n-                            isEmailSelected = value ?? false;\r\n-                          });\r\n-                        },\r\n-                      ),\r\n-                      const Text('Email'),\r\n-                    ],\r\n-                  ),\r\n-                ),\r\n-                Flexible(\r\n-                  child: Column(\r\n-                    children: [\r\n-                      Checkbox(\r\n-                        value: isPushSelected,\r\n-                        onChanged: (bool? value) {\r\n-                          setState(() {\r\n-                            isPushSelected = value ?? false;\r\n-                          });\r\n-                        },\r\n-                      ),\r\n-                      const Text('Push Notifications'),\r\n-                    ],\r\n-                  ),\r\n-                ),\r\n-              ],\r\n-            ),\r\n-\r\n-            const Divider(height: 24),\r\n-\r\n-            // Remove Notification Button\r\n-            Align(\r\n-              alignment: Alignment.centerRight,\r\n-              child: TextButton.icon(\r\n-                onPressed: widget\r\n-                    .onNotificationRemove, // Using the callback for removing\r\n-                icon: const Icon(Icons.delete_outline, color: Colors.redAccent),\r\n-                label: const Text(\r\n-                  'Remove',\r\n-                  style: TextStyle(\r\n-                    color: Colors.redAccent,\r\n-                    fontSize: 14,\r\n-                    fontWeight: FontWeight.bold,\r\n-                  ),\r\n-                ),\r\n-                style: TextButton.styleFrom(\r\n-                  padding: EdgeInsets.zero,\r\n-                  tapTargetSize: MaterialTapTargetSize.shrinkWrap,\r\n-                ),\r\n-              ),\r\n-            ),\r\n-          ],\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-import 'package:flutter/material.dart';\r\n-import 'package:intl/intl.dart';\r\n-\r\n-class CarNotificationItem extends StatefulWidget {\r\n-  final int index;\r\n-  final DateTime selectedDate;\r\n-  final void Function(DateTime) onNotificationUpdate;\r\n-  final VoidCallback onNotificationRemove;\r\n-\r\n-  const CarNotificationItem({\r\n-    super.key,\r\n-    required this.index,\r\n-    required this.selectedDate,\r\n-    required this.onNotificationUpdate,\r\n-    required this.onNotificationRemove,\r\n-  });\r\n-\r\n-  @override\r\n-  _CarNotificationItemState createState() => _CarNotificationItemState();\r\n-}\r\n-\r\n-class _CarNotificationItemState extends State<CarNotificationItem> {\r\n-  bool isSmsSelected = false;\r\n-  bool isEmailSelected = false;\r\n-  bool isPushSelected = false;\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Card(\r\n-      margin: const EdgeInsets.symmetric(vertical: 8),\r\n-      elevation: 3,\r\n-      shape: RoundedRectangleBorder(\r\n-        borderRadius: BorderRadius.circular(15),\r\n-      ),\r\n-      child: Padding(\r\n-        padding: const EdgeInsets.all(16),\r\n-        child: Column(\r\n-          crossAxisAlignment: CrossAxisAlignment.start,\r\n-          children: [\r\n-            // Row for Date Picker and Time Picker\r\n-            Row(\r\n-              children: [\r\n-                Expanded(\r\n-                  flex: 2, // Date picker takes more space\r\n-                  child: InkWell(\r\n-                    onTap: () async {\r\n-                      DateTime? newDate = await showDatePicker(\r\n-                        context: context,\r\n-                        initialDate: widget.selectedDate,\r\n-                        firstDate: DateTime.now(),\r\n-                        lastDate: DateTime(2101),\r\n-                      );\r\n-                      if (newDate != null) {\r\n-                        widget.onNotificationUpdate(\r\n-                            newDate); // Using the callback\r\n-                      }\r\n-                    },\r\n-                    borderRadius: BorderRadius.circular(8),\r\n-                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n-                    child: Container(\r\n-                      padding: const EdgeInsets.symmetric(\r\n-                          horizontal: 12, vertical: 8),\r\n-                      decoration: BoxDecoration(\r\n-                        color: Colors.indigoAccent.withOpacity(0.1),\r\n-                        borderRadius: BorderRadius.circular(8),\r\n-                      ),\r\n-                      child: Row(\r\n-                        children: [\r\n-                          const Icon(Icons.calendar_today_outlined,\r\n-                              color: Colors.indigoAccent),\r\n-                          const SizedBox(width: 8),\r\n-                          Text(\r\n-                            DateFormat('dd.MM.yyyy')\r\n-                                .format(widget.selectedDate),\r\n-                            style: const TextStyle(\r\n-                              fontSize: 16,\r\n-                              color: Colors.indigoAccent,\r\n-                              fontWeight: FontWeight.bold,\r\n-                              decoration: TextDecoration.underline,\r\n-                            ),\r\n-                          ),\r\n-                        ],\r\n-                      ),\r\n-                    ),\r\n-                  ),\r\n-                ),\r\n-                const SizedBox(\r\n-                    width: 16), // Spacing between date and time picker\r\n-                Expanded(\r\n-                  flex: 1, // Time picker takes less space\r\n-                  child: InkWell(\r\n-                    onTap: () async {\r\n-                      TimeOfDay? time = await showTimePicker(\r\n-                        context: context,\r\n-                        initialTime:\r\n-                            TimeOfDay.fromDateTime(widget.selectedDate),\r\n-                      );\r\n-                      if (time != null) {\r\n-                        DateTime updatedDateTime = DateTime(\r\n-                          widget.selectedDate.year,\r\n-                          widget.selectedDate.month,\r\n-                          widget.selectedDate.day,\r\n-                          time.hour,\r\n-                          time.minute,\r\n-                        );\r\n-                        widget.onNotificationUpdate(\r\n-                            updatedDateTime); // Using the callback\r\n-                      }\r\n-                    },\r\n-                    borderRadius: BorderRadius.circular(8),\r\n-                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n-                    child: Container(\r\n-                      padding: const EdgeInsets.symmetric(\r\n-                          horizontal: 12, vertical: 8),\r\n-                      decoration: BoxDecoration(\r\n-                        color: Colors.indigoAccent.withOpacity(0.1),\r\n-                        borderRadius: BorderRadius.circular(8),\r\n-                      ),\r\n-                      child: Row(\r\n-                        children: [\r\n-                          const Icon(Icons.access_time,\r\n-                              color: Colors.indigoAccent),\r\n-                          const SizedBox(width: 8),\r\n-                          Text(\r\n-                            DateFormat('HH:mm').format(widget.selectedDate),\r\n-                            style: const TextStyle(\r\n-                              fontSize: 16,\r\n-                              color: Colors.indigoAccent,\r\n-                              fontWeight: FontWeight.bold,\r\n-                            ),\r\n-                          ),\r\n-                        ],\r\n-                      ),\r\n-                    ),\r\n-                  ),\r\n-                ),\r\n-              ],\r\n-            ),\r\n-            const SizedBox(height: 20),\r\n-\r\n-            // Checkbox Row for SMS, Email, Push Notifications with text below checkbox\r\n-            Row(\r\n-              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-              children: [\r\n-                Column(\r\n-                  children: [\r\n-                    Checkbox(\r\n-                      value: isSmsSelected,\r\n-                      onChanged: (bool? value) {\r\n-                        setState(() {\r\n-                          isSmsSelected = value ?? false;\r\n-                        });\r\n-                      },\r\n-                    ),\r\n-                    const Text('SMS'),\r\n-                  ],\r\n-                ),\r\n-                Column(\r\n-                  children: [\r\n-                    Checkbox(\r\n-                      value: isEmailSelected,\r\n-                      onChanged: (bool? value) {\r\n-                        setState(() {\r\n-                          isEmailSelected = value ?? false;\r\n-                        });\r\n-                      },\r\n-                    ),\r\n-                    const Text('Email'),\r\n-                  ],\r\n-                ),\r\n-                Column(\r\n-                  children: [\r\n-                    Checkbox(\r\n-                      value: isPushSelected,\r\n-                      onChanged: (bool? value) {\r\n-                        setState(() {\r\n-                          isPushSelected = value ?? false;\r\n-                        });\r\n-                      },\r\n-                    ),\r\n-                    const Text('Push Notifications'),\r\n-                  ],\r\n-                ),\r\n-              ],\r\n-            ),\r\n-\r\n-            const Divider(height: 24),\r\n-\r\n-            // Remove Notification Button\r\n-            Align(\r\n-              alignment: Alignment.centerRight,\r\n-              child: TextButton.icon(\r\n-                onPressed: widget\r\n-                    .onNotificationRemove, // Using the callback for removing\r\n-                icon: const Icon(Icons.delete_outline, color: Colors.redAccent),\r\n-                label: const Text(\r\n-                  'Remove',\r\n-                  style: TextStyle(\r\n-                    color: Colors.redAccent,\r\n-                    fontSize: 14,\r\n-                    fontWeight: FontWeight.bold,\r\n-                  ),\r\n-                ),\r\n-                style: TextButton.styleFrom(\r\n-                  padding: EdgeInsets.zero,\r\n-                  tapTargetSize: MaterialTapTargetSize.shrinkWrap,\r\n-                ),\r\n-              ),\r\n-            ),\r\n-          ],\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1729755033767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,8 +132,9 @@\n                               fontSize: 16,\r\n                               color: Colors.indigoAccent,\r\n                               fontWeight: FontWeight.bold,\r\n                             ),\r\n+                            overflow: TextOverflow.ellipsis, // Handle overflow\r\n                           ),\r\n                         ],\r\n                       ),\r\n                     ),\r\n@@ -187,9 +188,9 @@\n                             isPushSelected = value ?? false;\r\n                           });\r\n                         },\r\n                       ),\r\n-                      const Text('Notificari Push'),\r\n+                      const Text('Push Notifications'),\r\n                     ],\r\n                   ),\r\n                 ),\r\n               ],\r\n"
                },
                {
                    "date": 1729755090917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:intl/intl.dart';\r\n+\r\n+class CarNotificationItem extends StatefulWidget {\r\n+  final int index;\r\n+  final DateTime selectedDate;\r\n+  final void Function(DateTime) onNotificationUpdate;\r\n+  final VoidCallback onNotificationRemove;\r\n+\r\n+  const CarNotificationItem({\r\n+    super.key,\r\n+    required this.index,\r\n+    required this.selectedDate,\r\n+    required this.onNotificationUpdate,\r\n+    required this.onNotificationRemove,\r\n+  });\r\n+\r\n+  @override\r\n+  _CarNotificationItemState createState() => _CarNotificationItemState();\r\n+}\r\n+\r\n+class _CarNotificationItemState extends State<CarNotificationItem> {\r\n+  bool isSmsSelected = false;\r\n+  bool isEmailSelected = false;\r\n+  bool isPushSelected = false;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Card(\r\n+      margin: const EdgeInsets.symmetric(vertical: 8),\r\n+      elevation: 3,\r\n+      shape: RoundedRectangleBorder(\r\n+        borderRadius: BorderRadius.circular(15),\r\n+      ),\r\n+      child: Padding(\r\n+        padding: const EdgeInsets.all(16),\r\n+        child: Column(\r\n+          crossAxisAlignment: CrossAxisAlignment.start,\r\n+          children: [\r\n+            // Row for Date Picker and Time Picker\r\n+            Row(\r\n+              children: [\r\n+                Expanded(\r\n+                  flex: 1, // Reduced size of the date picker\r\n+                  child: InkWell(\r\n+                    onTap: () async {\r\n+                      DateTime? newDate = await showDatePicker(\r\n+                        context: context,\r\n+                        initialDate: widget.selectedDate,\r\n+                        firstDate: DateTime.now(),\r\n+                        lastDate: DateTime(2101),\r\n+                      );\r\n+                      if (newDate != null) {\r\n+                        widget.onNotificationUpdate(\r\n+                            newDate); // Using the callback\r\n+                      }\r\n+                    },\r\n+                    borderRadius: BorderRadius.circular(8),\r\n+                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n+                    child: Container(\r\n+                      padding: const EdgeInsets.symmetric(\r\n+                          horizontal: 12, vertical: 8),\r\n+                      decoration: BoxDecoration(\r\n+                        color: Colors.indigoAccent.withOpacity(0.1),\r\n+                        borderRadius: BorderRadius.circular(8),\r\n+                      ),\r\n+                      child: Row(\r\n+                        children: [\r\n+                          const Icon(Icons.calendar_today_outlined,\r\n+                              color: Colors.indigoAccent),\r\n+                          const SizedBox(width: 8),\r\n+                          Expanded(\r\n+                            // Ensure text doesn't overflow\r\n+                            child: Text(\r\n+                              DateFormat('dd.MM.yyyy')\r\n+                                  .format(widget.selectedDate),\r\n+                              style: const TextStyle(\r\n+                                fontSize: 16,\r\n+                                color: Colors.indigoAccent,\r\n+                                fontWeight: FontWeight.bold,\r\n+                                decoration: TextDecoration.underline,\r\n+                              ),\r\n+                              overflow:\r\n+                                  TextOverflow.ellipsis, // Handle overflow\r\n+                            ),\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+                const SizedBox(\r\n+                    width: 16), // Spacing between date and time picker\r\n+                Expanded(\r\n+                  flex: 1, // Time picker remains the same\r\n+                  child: InkWell(\r\n+                    onTap: () async {\r\n+                      TimeOfDay? time = await showTimePicker(\r\n+                        context: context,\r\n+                        initialTime:\r\n+                            TimeOfDay.fromDateTime(widget.selectedDate),\r\n+                      );\r\n+                      if (time != null) {\r\n+                        DateTime updatedDateTime = DateTime(\r\n+                          widget.selectedDate.year,\r\n+                          widget.selectedDate.month,\r\n+                          widget.selectedDate.day,\r\n+                          time.hour,\r\n+                          time.minute,\r\n+                        );\r\n+                        widget.onNotificationUpdate(\r\n+                            updatedDateTime); // Using the callback\r\n+                      }\r\n+                    },\r\n+                    borderRadius: BorderRadius.circular(8),\r\n+                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n+                    child: Container(\r\n+                      padding: const EdgeInsets.symmetric(\r\n+                          horizontal: 12, vertical: 8),\r\n+                      decoration: BoxDecoration(\r\n+                        color: Colors.indigoAccent.withOpacity(0.1),\r\n+                        borderRadius: BorderRadius.circular(8),\r\n+                      ),\r\n+                      child: Row(\r\n+                        children: [\r\n+                          const Icon(Icons.access_time,\r\n+                              color: Colors.indigoAccent),\r\n+                          const SizedBox(width: 8),\r\n+                          Text(\r\n+                            DateFormat('HH:mm').format(widget.selectedDate),\r\n+                            style: const TextStyle(\r\n+                              fontSize: 16,\r\n+                              color: Colors.indigoAccent,\r\n+                              fontWeight: FontWeight.bold,\r\n+                            ),\r\n+                            overflow: TextOverflow.ellipsis, // Handle overflow\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+            const SizedBox(height: 20),\r\n+\r\n+            // Checkbox Row for SMS, Email, Push Notifications with text below checkbox\r\n+            Row(\r\n+              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+              children: [\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isSmsSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isSmsSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('SMS'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isEmailSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isEmailSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('Email'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isPushSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isPushSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('Push Notifications'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+\r\n+            const Divider(height: 24),\r\n+\r\n+            // Remove Notification Button\r\n+            Align(\r\n+              alignment: Alignment.centerRight,\r\n+              child: TextButton.icon(\r\n+                onPressed: widget\r\n+                    .onNotificationRemove, // Using the callback for removing\r\n+                icon: const Icon(Icons.delete_outline, color: Colors.redAccent),\r\n+                label: const Text(\r\n+                  'Remove',\r\n+                  style: TextStyle(\r\n+                    color: Colors.redAccent,\r\n+                    fontSize: 14,\r\n+                    fontWeight: FontWeight.bold,\r\n+                  ),\r\n+                ),\r\n+                style: TextButton.styleFrom(\r\n+                  padding: EdgeInsets.zero,\r\n+                  tapTargetSize: MaterialTapTargetSize.shrinkWrap,\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1729755117142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:intl/intl.dart';\r\n+\r\n+class CarNotificationItem extends StatefulWidget {\r\n+  final int index;\r\n+  final DateTime selectedDate;\r\n+  final void Function(DateTime) onNotificationUpdate;\r\n+  final VoidCallback onNotificationRemove;\r\n+\r\n+  const CarNotificationItem({\r\n+    super.key,\r\n+    required this.index,\r\n+    required this.selectedDate,\r\n+    required this.onNotificationUpdate,\r\n+    required this.onNotificationRemove,\r\n+  });\r\n+\r\n+  @override\r\n+  _CarNotificationItemState createState() => _CarNotificationItemState();\r\n+}\r\n+\r\n+class _CarNotificationItemState extends State<CarNotificationItem> {\r\n+  bool isSmsSelected = false;\r\n+  bool isEmailSelected = false;\r\n+  bool isPushSelected = false;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Card(\r\n+      margin: const EdgeInsets.symmetric(vertical: 8),\r\n+      elevation: 3,\r\n+      shape: RoundedRectangleBorder(\r\n+        borderRadius: BorderRadius.circular(15),\r\n+      ),\r\n+      child: Padding(\r\n+        padding: const EdgeInsets.all(16),\r\n+        child: Column(\r\n+          crossAxisAlignment: CrossAxisAlignment.start,\r\n+          children: [\r\n+            // Row for Date Picker and Time Picker\r\n+            Row(\r\n+              children: [\r\n+                Expanded(\r\n+                  flex: 2, // Reduced size of the date picker\r\n+                  child: InkWell(\r\n+                    onTap: () async {\r\n+                      DateTime? newDate = await showDatePicker(\r\n+                        context: context,\r\n+                        initialDate: widget.selectedDate,\r\n+                        firstDate: DateTime.now(),\r\n+                        lastDate: DateTime(2101),\r\n+                      );\r\n+                      if (newDate != null) {\r\n+                        widget.onNotificationUpdate(\r\n+                            newDate); // Using the callback\r\n+                      }\r\n+                    },\r\n+                    borderRadius: BorderRadius.circular(8),\r\n+                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n+                    child: Container(\r\n+                      padding: const EdgeInsets.symmetric(\r\n+                          horizontal: 12, vertical: 8),\r\n+                      decoration: BoxDecoration(\r\n+                        color: Colors.indigoAccent.withOpacity(0.1),\r\n+                        borderRadius: BorderRadius.circular(8),\r\n+                      ),\r\n+                      child: Row(\r\n+                        children: [\r\n+                          const Icon(Icons.calendar_today_outlined,\r\n+                              color: Colors.indigoAccent),\r\n+                          const SizedBox(width: 8),\r\n+                          Expanded(\r\n+                            // Ensure text doesn't overflow\r\n+                            child: Text(\r\n+                              DateFormat('dd.MM.yyyy')\r\n+                                  .format(widget.selectedDate),\r\n+                              style: const TextStyle(\r\n+                                fontSize: 16,\r\n+                                color: Colors.indigoAccent,\r\n+                                fontWeight: FontWeight.bold,\r\n+                                decoration: TextDecoration.underline,\r\n+                              ),\r\n+                              overflow:\r\n+                                  TextOverflow.ellipsis, // Handle overflow\r\n+                            ),\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+                const SizedBox(\r\n+                    width: 16), // Spacing between date and time picker\r\n+                Expanded(\r\n+                  flex: 1, // Time picker remains the same\r\n+                  child: InkWell(\r\n+                    onTap: () async {\r\n+                      TimeOfDay? time = await showTimePicker(\r\n+                        context: context,\r\n+                        initialTime:\r\n+                            TimeOfDay.fromDateTime(widget.selectedDate),\r\n+                      );\r\n+                      if (time != null) {\r\n+                        DateTime updatedDateTime = DateTime(\r\n+                          widget.selectedDate.year,\r\n+                          widget.selectedDate.month,\r\n+                          widget.selectedDate.day,\r\n+                          time.hour,\r\n+                          time.minute,\r\n+                        );\r\n+                        widget.onNotificationUpdate(\r\n+                            updatedDateTime); // Using the callback\r\n+                      }\r\n+                    },\r\n+                    borderRadius: BorderRadius.circular(8),\r\n+                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n+                    child: Container(\r\n+                      padding: const EdgeInsets.symmetric(\r\n+                          horizontal: 12, vertical: 8),\r\n+                      decoration: BoxDecoration(\r\n+                        color: Colors.indigoAccent.withOpacity(0.1),\r\n+                        borderRadius: BorderRadius.circular(8),\r\n+                      ),\r\n+                      child: Row(\r\n+                        children: [\r\n+                          const Icon(Icons.access_time,\r\n+                              color: Colors.indigoAccent),\r\n+                          const SizedBox(width: 8),\r\n+                          Text(\r\n+                            DateFormat('HH:mm').format(widget.selectedDate),\r\n+                            style: const TextStyle(\r\n+                              fontSize: 16,\r\n+                              color: Colors.indigoAccent,\r\n+                              fontWeight: FontWeight.bold,\r\n+                            ),\r\n+                            overflow: TextOverflow.ellipsis, // Handle overflow\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+            const SizedBox(height: 20),\r\n+\r\n+            // Checkbox Row for SMS, Email, Push Notifications with text below checkbox\r\n+            Row(\r\n+              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+              children: [\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isSmsSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isSmsSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('SMS'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isEmailSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isEmailSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('Email'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isPushSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isPushSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('Push Notifications'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+\r\n+            const Divider(height: 24),\r\n+\r\n+            // Remove Notification Button\r\n+            Align(\r\n+              alignment: Alignment.centerRight,\r\n+              child: TextButton.icon(\r\n+                onPressed: widget\r\n+                    .onNotificationRemove, // Using the callback for removing\r\n+                icon: const Icon(Icons.delete_outline, color: Colors.redAccent),\r\n+                label: const Text(\r\n+                  'Remove',\r\n+                  style: TextStyle(\r\n+                    color: Colors.redAccent,\r\n+                    fontSize: 14,\r\n+                    fontWeight: FontWeight.bold,\r\n+                  ),\r\n+                ),\r\n+                style: TextButton.styleFrom(\r\n+                  padding: EdgeInsets.zero,\r\n+                  tapTargetSize: MaterialTapTargetSize.shrinkWrap,\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1729755122456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:intl/intl.dart';\r\n+\r\n+class CarNotificationItem extends StatefulWidget {\r\n+  final int index;\r\n+  final DateTime selectedDate;\r\n+  final void Function(DateTime) onNotificationUpdate;\r\n+  final VoidCallback onNotificationRemove;\r\n+\r\n+  const CarNotificationItem({\r\n+    super.key,\r\n+    required this.index,\r\n+    required this.selectedDate,\r\n+    required this.onNotificationUpdate,\r\n+    required this.onNotificationRemove,\r\n+  });\r\n+\r\n+  @override\r\n+  _CarNotificationItemState createState() => _CarNotificationItemState();\r\n+}\r\n+\r\n+class _CarNotificationItemState extends State<CarNotificationItem> {\r\n+  bool isSmsSelected = false;\r\n+  bool isEmailSelected = false;\r\n+  bool isPushSelected = false;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Card(\r\n+      margin: const EdgeInsets.symmetric(vertical: 8),\r\n+      elevation: 3,\r\n+      shape: RoundedRectangleBorder(\r\n+        borderRadius: BorderRadius.circular(15),\r\n+      ),\r\n+      child: Padding(\r\n+        padding: const EdgeInsets.all(16),\r\n+        child: Column(\r\n+          crossAxisAlignment: CrossAxisAlignment.start,\r\n+          children: [\r\n+            // Row for Date Picker and Time Picker\r\n+            Row(\r\n+              children: [\r\n+                Expanded(\r\n+                  flex: 1, // Reduced size of the date picker\r\n+                  child: InkWell(\r\n+                    onTap: () async {\r\n+                      DateTime? newDate = await showDatePicker(\r\n+                        context: context,\r\n+                        initialDate: widget.selectedDate,\r\n+                        firstDate: DateTime.now(),\r\n+                        lastDate: DateTime(2101),\r\n+                      );\r\n+                      if (newDate != null) {\r\n+                        widget.onNotificationUpdate(\r\n+                            newDate); // Using the callback\r\n+                      }\r\n+                    },\r\n+                    borderRadius: BorderRadius.circular(8),\r\n+                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n+                    child: Container(\r\n+                      padding: const EdgeInsets.symmetric(\r\n+                          horizontal: 12, vertical: 8),\r\n+                      decoration: BoxDecoration(\r\n+                        color: Colors.indigoAccent.withOpacity(0.1),\r\n+                        borderRadius: BorderRadius.circular(8),\r\n+                      ),\r\n+                      child: Row(\r\n+                        children: [\r\n+                          const Icon(Icons.calendar_today_outlined,\r\n+                              color: Colors.indigoAccent),\r\n+                          const SizedBox(width: 8),\r\n+                          Expanded(\r\n+                            // Ensure text doesn't overflow\r\n+                            child: Text(\r\n+                              DateFormat('dd.MM.yyyy')\r\n+                                  .format(widget.selectedDate),\r\n+                              style: const TextStyle(\r\n+                                fontSize: 16,\r\n+                                color: Colors.indigoAccent,\r\n+                                fontWeight: FontWeight.bold,\r\n+                                decoration: TextDecoration.underline,\r\n+                              ),\r\n+                              overflow:\r\n+                                  TextOverflow.ellipsis, // Handle overflow\r\n+                            ),\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+                const SizedBox(\r\n+                    width: 16), // Spacing between date and time picker\r\n+                Expanded(\r\n+                  flex: 1, // Time picker remains the same\r\n+                  child: InkWell(\r\n+                    onTap: () async {\r\n+                      TimeOfDay? time = await showTimePicker(\r\n+                        context: context,\r\n+                        initialTime:\r\n+                            TimeOfDay.fromDateTime(widget.selectedDate),\r\n+                      );\r\n+                      if (time != null) {\r\n+                        DateTime updatedDateTime = DateTime(\r\n+                          widget.selectedDate.year,\r\n+                          widget.selectedDate.month,\r\n+                          widget.selectedDate.day,\r\n+                          time.hour,\r\n+                          time.minute,\r\n+                        );\r\n+                        widget.onNotificationUpdate(\r\n+                            updatedDateTime); // Using the callback\r\n+                      }\r\n+                    },\r\n+                    borderRadius: BorderRadius.circular(8),\r\n+                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n+                    child: Container(\r\n+                      padding: const EdgeInsets.symmetric(\r\n+                          horizontal: 12, vertical: 8),\r\n+                      decoration: BoxDecoration(\r\n+                        color: Colors.indigoAccent.withOpacity(0.1),\r\n+                        borderRadius: BorderRadius.circular(8),\r\n+                      ),\r\n+                      child: Row(\r\n+                        children: [\r\n+                          const Icon(Icons.access_time,\r\n+                              color: Colors.indigoAccent),\r\n+                          const SizedBox(width: 8),\r\n+                          Text(\r\n+                            DateFormat('HH:mm').format(widget.selectedDate),\r\n+                            style: const TextStyle(\r\n+                              fontSize: 16,\r\n+                              color: Colors.indigoAccent,\r\n+                              fontWeight: FontWeight.bold,\r\n+                            ),\r\n+                            overflow: TextOverflow.ellipsis, // Handle overflow\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+            const SizedBox(height: 20),\r\n+\r\n+            // Checkbox Row for SMS, Email, Push Notifications with text below checkbox\r\n+            Row(\r\n+              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+              children: [\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isSmsSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isSmsSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('SMS'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isEmailSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isEmailSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('Email'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isPushSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isPushSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('Push Notifications'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+\r\n+            const Divider(height: 24),\r\n+\r\n+            // Remove Notification Button\r\n+            Align(\r\n+              alignment: Alignment.centerRight,\r\n+              child: TextButton.icon(\r\n+                onPressed: widget\r\n+                    .onNotificationRemove, // Using the callback for removing\r\n+                icon: const Icon(Icons.delete_outline, color: Colors.redAccent),\r\n+                label: const Text(\r\n+                  'Remove',\r\n+                  style: TextStyle(\r\n+                    color: Colors.redAccent,\r\n+                    fontSize: 14,\r\n+                    fontWeight: FontWeight.bold,\r\n+                  ),\r\n+                ),\r\n+                style: TextButton.styleFrom(\r\n+                  padding: EdgeInsets.zero,\r\n+                  tapTargetSize: MaterialTapTargetSize.shrinkWrap,\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1729755134818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:intl/intl.dart';\r\n+\r\n+class CarNotificationItem extends StatefulWidget {\r\n+  final int index;\r\n+  final DateTime selectedDate;\r\n+  final void Function(DateTime) onNotificationUpdate;\r\n+  final VoidCallback onNotificationRemove;\r\n+\r\n+  const CarNotificationItem({\r\n+    super.key,\r\n+    required this.index,\r\n+    required this.selectedDate,\r\n+    required this.onNotificationUpdate,\r\n+    required this.onNotificationRemove,\r\n+  });\r\n+\r\n+  @override\r\n+  _CarNotificationItemState createState() => _CarNotificationItemState();\r\n+}\r\n+\r\n+class _CarNotificationItemState extends State<CarNotificationItem> {\r\n+  bool isSmsSelected = false;\r\n+  bool isEmailSelected = false;\r\n+  bool isPushSelected = false;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Card(\r\n+      margin: const EdgeInsets.symmetric(vertical: 8),\r\n+      elevation: 3,\r\n+      shape: RoundedRectangleBorder(\r\n+        borderRadius: BorderRadius.circular(15),\r\n+      ),\r\n+      child: Padding(\r\n+        padding: const EdgeInsets.all(16),\r\n+        child: Column(\r\n+          crossAxisAlignment: CrossAxisAlignment.start,\r\n+          children: [\r\n+            // Row for Date Picker and Time Picker\r\n+            Row(\r\n+              children: [\r\n+                Expanded(\r\n+                  flex: 3, // Reduced size of the date picker\r\n+                  child: InkWell(\r\n+                    onTap: () async {\r\n+                      DateTime? newDate = await showDatePicker(\r\n+                        context: context,\r\n+                        initialDate: widget.selectedDate,\r\n+                        firstDate: DateTime.now(),\r\n+                        lastDate: DateTime(2101),\r\n+                      );\r\n+                      if (newDate != null) {\r\n+                        widget.onNotificationUpdate(\r\n+                            newDate); // Using the callback\r\n+                      }\r\n+                    },\r\n+                    borderRadius: BorderRadius.circular(8),\r\n+                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n+                    child: Container(\r\n+                      padding: const EdgeInsets.symmetric(\r\n+                          horizontal: 12, vertical: 8),\r\n+                      decoration: BoxDecoration(\r\n+                        color: Colors.indigoAccent.withOpacity(0.1),\r\n+                        borderRadius: BorderRadius.circular(8),\r\n+                      ),\r\n+                      child: Row(\r\n+                        children: [\r\n+                          const Icon(Icons.calendar_today_outlined,\r\n+                              color: Colors.indigoAccent),\r\n+                          const SizedBox(width: 8),\r\n+                          Expanded(\r\n+                            // Ensure text doesn't overflow\r\n+                            child: Text(\r\n+                              DateFormat('dd.MM.yyyy')\r\n+                                  .format(widget.selectedDate),\r\n+                              style: const TextStyle(\r\n+                                fontSize: 16,\r\n+                                color: Colors.indigoAccent,\r\n+                                fontWeight: FontWeight.bold,\r\n+                                decoration: TextDecoration.underline,\r\n+                              ),\r\n+                              overflow:\r\n+                                  TextOverflow.ellipsis, // Handle overflow\r\n+                            ),\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+                const SizedBox(\r\n+                    width: 16), // Spacing between date and time picker\r\n+                Expanded(\r\n+                  flex: 2, // Time picker remains the same\r\n+                  child: InkWell(\r\n+                    onTap: () async {\r\n+                      TimeOfDay? time = await showTimePicker(\r\n+                        context: context,\r\n+                        initialTime:\r\n+                            TimeOfDay.fromDateTime(widget.selectedDate),\r\n+                      );\r\n+                      if (time != null) {\r\n+                        DateTime updatedDateTime = DateTime(\r\n+                          widget.selectedDate.year,\r\n+                          widget.selectedDate.month,\r\n+                          widget.selectedDate.day,\r\n+                          time.hour,\r\n+                          time.minute,\r\n+                        );\r\n+                        widget.onNotificationUpdate(\r\n+                            updatedDateTime); // Using the callback\r\n+                      }\r\n+                    },\r\n+                    borderRadius: BorderRadius.circular(8),\r\n+                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n+                    child: Container(\r\n+                      padding: const EdgeInsets.symmetric(\r\n+                          horizontal: 12, vertical: 8),\r\n+                      decoration: BoxDecoration(\r\n+                        color: Colors.indigoAccent.withOpacity(0.1),\r\n+                        borderRadius: BorderRadius.circular(8),\r\n+                      ),\r\n+                      child: Row(\r\n+                        children: [\r\n+                          const Icon(Icons.access_time,\r\n+                              color: Colors.indigoAccent),\r\n+                          const SizedBox(width: 8),\r\n+                          Text(\r\n+                            DateFormat('HH:mm').format(widget.selectedDate),\r\n+                            style: const TextStyle(\r\n+                              fontSize: 16,\r\n+                              color: Colors.indigoAccent,\r\n+                              fontWeight: FontWeight.bold,\r\n+                            ),\r\n+                            overflow: TextOverflow.ellipsis, // Handle overflow\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+            const SizedBox(height: 20),\r\n+\r\n+            // Checkbox Row for SMS, Email, Push Notifications with text below checkbox\r\n+            Row(\r\n+              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+              children: [\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isSmsSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isSmsSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('SMS'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isEmailSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isEmailSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('Email'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isPushSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isPushSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('Push Notifications'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+\r\n+            const Divider(height: 24),\r\n+\r\n+            // Remove Notification Button\r\n+            Align(\r\n+              alignment: Alignment.centerRight,\r\n+              child: TextButton.icon(\r\n+                onPressed: widget\r\n+                    .onNotificationRemove, // Using the callback for removing\r\n+                icon: const Icon(Icons.delete_outline, color: Colors.redAccent),\r\n+                label: const Text(\r\n+                  'Remove',\r\n+                  style: TextStyle(\r\n+                    color: Colors.redAccent,\r\n+                    fontSize: 14,\r\n+                    fontWeight: FontWeight.bold,\r\n+                  ),\r\n+                ),\r\n+                style: TextButton.styleFrom(\r\n+                  padding: EdgeInsets.zero,\r\n+                  tapTargetSize: MaterialTapTargetSize.shrinkWrap,\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1729755152039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,9 @@\n                             isPushSelected = value ?? false;\r\n                           });\r\n                         },\r\n                       ),\r\n-                      const Text('Push Notifications'),\r\n+                      const Text('Notificari Push'),\r\n                     ],\r\n                   ),\r\n                 ),\r\n               ],\r\n"
                },
                {
                    "date": 1729755187441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:intl/intl.dart';\r\n+\r\n+class CarNotificationItem extends StatefulWidget {\r\n+  final int index;\r\n+  final DateTime selectedDate;\r\n+  final void Function(DateTime) onNotificationUpdate;\r\n+  final VoidCallback onNotificationRemove;\r\n+\r\n+  const CarNotificationItem({\r\n+    super.key,\r\n+    required this.index,\r\n+    required this.selectedDate,\r\n+    required this.onNotificationUpdate,\r\n+    required this.onNotificationRemove,\r\n+  });\r\n+\r\n+  @override\r\n+  _CarNotificationItemState createState() => _CarNotificationItemState();\r\n+}\r\n+\r\n+class _CarNotificationItemState extends State<CarNotificationItem> {\r\n+  bool isSmsSelected = false;\r\n+  bool isEmailSelected = false;\r\n+  bool isPushSelected = false;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Card(\r\n+      margin: const EdgeInsets.symmetric(vertical: 8),\r\n+      elevation: 3,\r\n+      shape: RoundedRectangleBorder(\r\n+        borderRadius: BorderRadius.circular(15),\r\n+      ),\r\n+      child: Padding(\r\n+        padding: const EdgeInsets.all(16),\r\n+        child: Column(\r\n+          crossAxisAlignment: CrossAxisAlignment.start,\r\n+          children: [\r\n+            // Row for Date Picker and Time Picker\r\n+            Row(\r\n+              children: [\r\n+                Expanded(\r\n+                  flex: 3, // Reduced size of the date picker\r\n+                  child: InkWell(\r\n+                    onTap: () async {\r\n+                      DateTime? newDate = await showDatePicker(\r\n+                        context: context,\r\n+                        initialDate: widget.selectedDate,\r\n+                        firstDate: DateTime.now(),\r\n+                        lastDate: DateTime(2101),\r\n+                      );\r\n+                      if (newDate != null) {\r\n+                        widget.onNotificationUpdate(\r\n+                            newDate); // Using the callback\r\n+                      }\r\n+                    },\r\n+                    borderRadius: BorderRadius.circular(8),\r\n+                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n+                    child: Container(\r\n+                      padding: const EdgeInsets.symmetric(\r\n+                          horizontal: 12, vertical: 8),\r\n+                      decoration: BoxDecoration(\r\n+                        color: Colors.indigoAccent.withOpacity(0.1),\r\n+                        borderRadius: BorderRadius.circular(8),\r\n+                      ),\r\n+                      child: Row(\r\n+                        children: [\r\n+                          const Icon(Icons.calendar_today_outlined,\r\n+                              color: Colors.indigoAccent),\r\n+                          const SizedBox(width: 8),\r\n+                          Expanded(\r\n+                            // Ensure text doesn't overflow\r\n+                            child: Text(\r\n+                              DateFormat('dd.MM.yyyy')\r\n+                                  .format(widget.selectedDate),\r\n+                              style: const TextStyle(\r\n+                                fontSize: 16,\r\n+                                color: Colors.indigoAccent,\r\n+                                fontWeight: FontWeight.bold,\r\n+                                decoration: TextDecoration.underline,\r\n+                              ),\r\n+                              overflow:\r\n+                                  TextOverflow.ellipsis, // Handle overflow\r\n+                            ),\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+                const SizedBox(\r\n+                    width: 16), // Spacing between date and time picker\r\n+                Expanded(\r\n+                  flex: 2, // Time picker remains the same\r\n+                  child: InkWell(\r\n+                    onTap: () async {\r\n+                      TimeOfDay? time = await showTimePicker(\r\n+                        context: context,\r\n+                        initialTime:\r\n+                            TimeOfDay.fromDateTime(widget.selectedDate),\r\n+                      );\r\n+                      if (time != null) {\r\n+                        DateTime updatedDateTime = DateTime(\r\n+                          widget.selectedDate.year,\r\n+                          widget.selectedDate.month,\r\n+                          widget.selectedDate.day,\r\n+                          time.hour,\r\n+                          time.minute,\r\n+                        );\r\n+                        widget.onNotificationUpdate(\r\n+                            updatedDateTime); // Using the callback\r\n+                      }\r\n+                    },\r\n+                    borderRadius: BorderRadius.circular(8),\r\n+                    splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n+                    child: Container(\r\n+                      padding: const EdgeInsets.symmetric(\r\n+                          horizontal: 12, vertical: 8),\r\n+                      decoration: BoxDecoration(\r\n+                        color: Colors.indigoAccent.withOpacity(0.1),\r\n+                        borderRadius: BorderRadius.circular(8),\r\n+                      ),\r\n+                      child: Row(\r\n+                        children: [\r\n+                          const Icon(Icons.access_time,\r\n+                              color: Colors.indigoAccent),\r\n+                          const SizedBox(width: 8),\r\n+                          Text(\r\n+                            DateFormat('HH:mm').format(widget.selectedDate),\r\n+                            style: const TextStyle(\r\n+                              fontSize: 16,\r\n+                              color: Colors.indigoAccent,\r\n+                              fontWeight: FontWeight.bold,\r\n+                            ),\r\n+                            overflow: TextOverflow.ellipsis, // Handle overflow\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+            const SizedBox(height: 20),\r\n+\r\n+            // Checkbox Row for SMS, Email, Push Notifications with text below checkbox\r\n+            Row(\r\n+              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+              children: [\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isSmsSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isSmsSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('SMS'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isEmailSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isEmailSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('Email'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+                Flexible(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Checkbox(\r\n+                        value: isPushSelected,\r\n+                        onChanged: (bool? value) {\r\n+                          setState(() {\r\n+                            isPushSelected = value ?? false;\r\n+                          });\r\n+                        },\r\n+                      ),\r\n+                      const Text('Notificari Push'),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+\r\n+            const Divider(height: 24),\r\n+\r\n+            // Remove Notification Button\r\n+            Align(\r\n+              alignment: Alignment.centerRight,\r\n+              child: TextButton.icon(\r\n+                onPressed: widget\r\n+                    .onNotificationRemove, // Using the callback for removing\r\n+                icon: const Icon(Icons.delete_outline, color: Colors.redAccent),\r\n+                label: const Text(\r\n+                  'Sterge',\r\n+                  style: TextStyle(\r\n+                    color: Colors.redAccent,\r\n+                    fontSize: 14,\r\n+                    fontWeight: FontWeight.bold,\r\n+                  ),\r\n+                ),\r\n+                style: TextButton.styleFrom(\r\n+                  padding: EdgeInsets.zero,\r\n+                  tapTargetSize: MaterialTapTargetSize.shrinkWrap,\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1729755305100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,9 @@\n                             isPushSelected = value ?? false;\r\n                           });\r\n                         },\r\n                       ),\r\n-                      const Text('Notificari Push'),\r\n+                      const Text('Notificări Push'),\r\n                     ],\r\n                   ),\r\n                 ),\r\n               ],\r\n"
                }
            ],
            "date": 1729360561363,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:intl/intl.dart';\r\n\r\nclass NotificationItem extends StatelessWidget {\r\n  final int index;\r\n  final DateTime selectedDate;\r\n  final void Function(DateTime) onNotificationUpdate; // New parameter\r\n  final VoidCallback onNotificationRemove;\r\n\r\n  const NotificationItem({\r\n    Key? key,\r\n    required this.index,\r\n    required this.selectedDate,\r\n    required this.onNotificationUpdate, // Accepting the callback\r\n    required this.onNotificationRemove,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Card(\r\n      margin: const EdgeInsets.symmetric(vertical: 8),\r\n      elevation: 3,\r\n      shape: RoundedRectangleBorder(\r\n        borderRadius: BorderRadius.circular(15),\r\n      ),\r\n      child: Padding(\r\n        padding: const EdgeInsets.all(16),\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            // Date Picker for Notification (Styled as a Button)\r\n            InkWell(\r\n              onTap: () async {\r\n                DateTime? newDate = await showDatePicker(\r\n                  context: context,\r\n                  initialDate: selectedDate,\r\n                  firstDate: DateTime.now(),\r\n                  lastDate: DateTime(2101),\r\n                );\r\n                if (newDate != null) {\r\n                  onNotificationUpdate(newDate); // Using the callback\r\n                }\r\n              },\r\n              borderRadius: BorderRadius.circular(8),\r\n              splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n              child: Container(\r\n                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),\r\n                decoration: BoxDecoration(\r\n                  color: Colors.indigoAccent.withOpacity(0.1), // Subtle background\r\n                  borderRadius: BorderRadius.circular(8),\r\n                ),\r\n                child: Row(\r\n                  children: [\r\n                    const Icon(Icons.calendar_today_outlined, color: Colors.indigoAccent),\r\n                    const SizedBox(width: 8),\r\n                    Text(\r\n                      DateFormat('dd.MM.yyyy').format(selectedDate), // Updated format to dd.MM.yyyy\r\n                      style: const TextStyle(\r\n                        fontSize: 16,\r\n                        color: Colors.indigoAccent,\r\n                        fontWeight: FontWeight.bold,\r\n                        decoration: TextDecoration.underline, // Underline for interactivity\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n            ),\r\n            const SizedBox(height: 20),\r\n\r\n            // Time Picker Button\r\n            InkWell(\r\n              onTap: () async {\r\n                TimeOfDay? time = await showTimePicker(\r\n                  context: context,\r\n                  initialTime: TimeOfDay.fromDateTime(selectedDate),\r\n                );\r\n                if (time != null) {\r\n                  DateTime updatedDateTime = DateTime(\r\n                    selectedDate.year,\r\n                    selectedDate.month,\r\n                    selectedDate.day,\r\n                    time.hour,\r\n                    time.minute,\r\n                  );\r\n                  onNotificationUpdate(updatedDateTime); // Using the callback\r\n                }\r\n              },\r\n              borderRadius: BorderRadius.circular(8),\r\n              splashColor: Colors.indigoAccent.withOpacity(0.1),\r\n              child: Container(\r\n                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),\r\n                decoration: BoxDecoration(\r\n                  color: Colors.indigoAccent.withOpacity(0.1),\r\n                  borderRadius: BorderRadius.circular(8),\r\n                ),\r\n                child: Row(\r\n                  children: [\r\n                    const Icon(Icons.access_time, color: Colors.indigoAccent),\r\n                    const SizedBox(width: 8),\r\n                    Text(\r\n                      DateFormat('HH:mm').format(selectedDate),\r\n                      style: const TextStyle(\r\n                        fontSize: 16,\r\n                        color: Colors.indigoAccent,\r\n                        fontWeight: FontWeight.bold,\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n            ),\r\n            const Divider(height: 24),\r\n\r\n            // Remove Notification Button\r\n            Align(\r\n              alignment: Alignment.centerRight,\r\n              child: TextButton.icon(\r\n                onPressed: onNotificationRemove, // Using the callback for removing\r\n                icon: const Icon(Icons.delete_outline, color: Colors.redAccent),\r\n                label: const Text(\r\n                  'Remove',\r\n                  style: TextStyle(\r\n                    color: Colors.redAccent,\r\n                    fontSize: 14,\r\n                    fontWeight: FontWeight.bold,\r\n                  ),\r\n                ),\r\n                style: TextButton.styleFrom(\r\n                  padding: EdgeInsets.zero,\r\n                  tapTargetSize: MaterialTapTargetSize.shrinkWrap,\r\n                ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}