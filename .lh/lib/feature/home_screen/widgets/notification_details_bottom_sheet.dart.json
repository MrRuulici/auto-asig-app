{
    "sourceFile": "lib/feature/home_screen/widgets/notification_details_bottom_sheet.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1730896834484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730896873906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,10 @@\n                         Checkbox(\r\n                           value: notification.sms,\r\n                           onChanged: (value) {\r\n                             setState(() {\r\n-                              modifiedNotifications[index] = notification.copyWith(sms: value);\r\n+                              modifiedNotifications[index] =\r\n+                                  notification.copyWith(sms: value);\r\n                             });\r\n                           },\r\n                         ),\r\n                         const Text('SMS'),\r\n@@ -75,9 +76,10 @@\n                         Checkbox(\r\n                           value: notification.email,\r\n                           onChanged: (value) {\r\n                             setState(() {\r\n-                              modifiedNotifications[index] = notification.copyWith(email: value);\r\n+                              modifiedNotifications[index] =\r\n+                                  notification.copyWith(email: value);\r\n                             });\r\n                           },\r\n                         ),\r\n                         const Text('Email'),\r\n@@ -85,9 +87,10 @@\n                         Checkbox(\r\n                           value: notification.push,\r\n                           onChanged: (value) {\r\n                             setState(() {\r\n-                              modifiedNotifications[index] = notification.copyWith(push: value);\r\n+                              modifiedNotifications[index] =\r\n+                                  notification.copyWith(push: value);\r\n                             });\r\n                           },\r\n                         ),\r\n                         const Text('Push'),\r\n@@ -108,9 +111,10 @@\n                               ),\r\n                             );\r\n                             if (pickedDate != null) {\r\n                               setState(() {\r\n-                                modifiedNotifications[index] = notification.copyWith(date: pickedDate);\r\n+                                modifiedNotifications[index] =\r\n+                                    notification.copyWith(date: pickedDate);\r\n                               });\r\n                             }\r\n                           },\r\n                           child: Text(\r\n@@ -126,9 +130,10 @@\n           ),\r\n           const SizedBox(height: 16),\r\n           ElevatedButton(\r\n             onPressed: () {\r\n-              widget.onSave(modifiedNotifications); // Pass updated list to onSave\r\n+              widget\r\n+                  .onSave(modifiedNotifications); // Pass updated list to onSave\r\n               Navigator.pop(context);\r\n             },\r\n             child: const Text('Salvează modificările'),\r\n           ),\r\n"
                },
                {
                    "date": 1730898467347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,144 +1,137 @@\n+import 'package:auto_asig/feature/home_screen/cubit/bottom_sheet_details_cubit.dart';\r\n import 'package:flutter/material.dart';\r\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n import 'package:auto_asig/core/models/notification_model.dart';\r\n \r\n-class NotificationDetailsBottomSheet extends StatefulWidget {\r\n+class NotificationDetailsBottomSheet extends StatelessWidget {\r\n   final String title;\r\n-  final List<NotificationModel> notifications;\r\n+  final List<NotificationModel> initialNotifications;\r\n   final void Function(List<NotificationModel>) onSave;\r\n \r\n   const NotificationDetailsBottomSheet({\r\n     super.key,\r\n     required this.title,\r\n-    required this.notifications,\r\n+    required this.initialNotifications,\r\n     required this.onSave,\r\n   });\r\n \r\n   @override\r\n-  _NotificationDetailsBottomSheetState createState() =>\r\n-      _NotificationDetailsBottomSheetState();\r\n-}\r\n-\r\n-class _NotificationDetailsBottomSheetState\r\n-    extends State<NotificationDetailsBottomSheet> {\r\n-  late List<NotificationModel> modifiedNotifications;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    modifiedNotifications = List.from(widget.notifications);\r\n-  }\r\n-\r\n-  @override\r\n   Widget build(BuildContext context) {\r\n-    return Container(\r\n-      padding: const EdgeInsets.all(16.0),\r\n-      decoration: const BoxDecoration(\r\n-        color: Colors.white,\r\n-        borderRadius: BorderRadius.only(\r\n-          topLeft: Radius.circular(20),\r\n-          topRight: Radius.circular(20),\r\n-        ),\r\n-      ),\r\n-      child: Column(\r\n-        mainAxisSize: MainAxisSize.min,\r\n-        children: [\r\n-          Text(\r\n-            'Setări notificări pentru ${widget.title}',\r\n-            style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 18),\r\n-          ),\r\n-          const SizedBox(height: 16),\r\n-          ListView.builder(\r\n-            shrinkWrap: true,\r\n-            itemCount: modifiedNotifications.length,\r\n-            itemBuilder: (context, index) {\r\n-              final notification = modifiedNotifications[index];\r\n-              return ListTile(\r\n-                title: Text(\r\n-                  'Notificare ${index + 1}',\r\n-                  style: const TextStyle(fontWeight: FontWeight.bold),\r\n+    return BlocProvider(\r\n+      create: (_) => BottomSheetDetailsCubit(initialNotifications),\r\n+      child: BlocBuilder<BottomSheetDetailsCubit, BottomSheetDetailsState>(\r\n+        builder: (context, state) {\r\n+          return Container(\r\n+            padding: const EdgeInsets.all(16.0),\r\n+            decoration: const BoxDecoration(\r\n+              color: Colors.white,\r\n+              borderRadius: BorderRadius.only(\r\n+                topLeft: Radius.circular(20),\r\n+                topRight: Radius.circular(20),\r\n+              ),\r\n+            ),\r\n+            child: Column(\r\n+              mainAxisSize: MainAxisSize.min,\r\n+              children: [\r\n+                Text(\r\n+                  'Setări notificări pentru $title',\r\n+                  style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 18),\r\n                 ),\r\n-                subtitle: Column(\r\n-                  crossAxisAlignment: CrossAxisAlignment.start,\r\n-                  children: [\r\n-                    Row(\r\n-                      children: [\r\n-                        Checkbox(\r\n-                          value: notification.sms,\r\n-                          onChanged: (value) {\r\n-                            setState(() {\r\n-                              modifiedNotifications[index] =\r\n-                                  notification.copyWith(sms: value);\r\n-                            });\r\n-                          },\r\n-                        ),\r\n-                        const Text('SMS'),\r\n-                        const SizedBox(width: 16),\r\n-                        Checkbox(\r\n-                          value: notification.email,\r\n-                          onChanged: (value) {\r\n-                            setState(() {\r\n-                              modifiedNotifications[index] =\r\n-                                  notification.copyWith(email: value);\r\n-                            });\r\n-                          },\r\n-                        ),\r\n-                        const Text('Email'),\r\n-                        const SizedBox(width: 16),\r\n-                        Checkbox(\r\n-                          value: notification.push,\r\n-                          onChanged: (value) {\r\n-                            setState(() {\r\n-                              modifiedNotifications[index] =\r\n-                                  notification.copyWith(push: value);\r\n-                            });\r\n-                          },\r\n-                        ),\r\n-                        const Text('Push'),\r\n-                      ],\r\n-                    ),\r\n-                    Row(\r\n-                      children: [\r\n-                        const Text('Dată notificare:'),\r\n-                        const SizedBox(width: 8),\r\n-                        TextButton(\r\n-                          onPressed: () async {\r\n-                            DateTime? pickedDate = await showDatePicker(\r\n-                              context: context,\r\n-                              initialDate: notification.date,\r\n-                              firstDate: DateTime.now(),\r\n-                              lastDate: DateTime.now().add(\r\n-                                const Duration(days: 365),\r\n+                const SizedBox(height: 16),\r\n+                ListView.builder(\r\n+                  shrinkWrap: true,\r\n+                  itemCount: state.notifications.length,\r\n+                  itemBuilder: (context, index) {\r\n+                    final notification = state.notifications[index];\r\n+                    return ListTile(\r\n+                      title: Text(\r\n+                        'Notificare ${index + 1}',\r\n+                        style: const TextStyle(fontWeight: FontWeight.bold),\r\n+                      ),\r\n+                      subtitle: Column(\r\n+                        crossAxisAlignment: CrossAxisAlignment.start,\r\n+                        children: [\r\n+                          Row(\r\n+                            children: [\r\n+                              Checkbox(\r\n+                                value: notification.sms,\r\n+                                onChanged: (value) {\r\n+                                  context.read<BottomSheetDetailsCubit>().updateNotification(\r\n+                                        index,\r\n+                                        notification.copyWith(sms: value),\r\n+                                      );\r\n+                                },\r\n                               ),\r\n-                            );\r\n-                            if (pickedDate != null) {\r\n-                              setState(() {\r\n-                                modifiedNotifications[index] =\r\n-                                    notification.copyWith(date: pickedDate);\r\n-                              });\r\n-                            }\r\n-                          },\r\n-                          child: Text(\r\n-                            '${notification.date.day}-${notification.date.month}-${notification.date.year}',\r\n+                              const Text('SMS'),\r\n+                              const SizedBox(width: 16),\r\n+                              Checkbox(\r\n+                                value: notification.email,\r\n+                                onChanged: (value) {\r\n+                                  context.read<BottomSheetDetailsCubit>().updateNotification(\r\n+                                        index,\r\n+                                        notification.copyWith(email: value),\r\n+                                      );\r\n+                                },\r\n+                              ),\r\n+                              const Text('Email'),\r\n+                              const SizedBox(width: 16),\r\n+                              Checkbox(\r\n+                                value: notification.push,\r\n+                                onChanged: (value) {\r\n+                                  context.read<BottomSheetDetailsCubit>().updateNotification(\r\n+                                        index,\r\n+                                        notification.copyWith(push: value),\r\n+                                      );\r\n+                                },\r\n+                              ),\r\n+                              const Text('Push'),\r\n+                            ],\r\n                           ),\r\n-                        ),\r\n-                      ],\r\n-                    ),\r\n-                  ],\r\n+                          Row(\r\n+                            children: [\r\n+                              const Text('Dată notificare:'),\r\n+                              const SizedBox(width: 8),\r\n+                              TextButton(\r\n+                                onPressed: () async {\r\n+                                  DateTime? pickedDate = await showDatePicker(\r\n+                                    context: context,\r\n+                                    initialDate: notification.date,\r\n+                                    firstDate: DateTime.now(),\r\n+                                    lastDate: DateTime.now().add(\r\n+                                      const Duration(days: 365),\r\n+                                    ),\r\n+                                  );\r\n+                                  if (pickedDate != null) {\r\n+                                    context.read<BottomSheetDetailsCubit>().updateNotification(\r\n+                                          index,\r\n+                                          notification.copyWith(date: pickedDate),\r\n+                                        );\r\n+                                  }\r\n+                                },\r\n+                                child: Text(\r\n+                                  '${notification.date.day}-${notification.date.month}-${notification.date.year}',\r\n+                                ),\r\n+                              ),\r\n+                            ],\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    );\r\n+                  },\r\n                 ),\r\n-              );\r\n-            },\r\n-          ),\r\n-          const SizedBox(height: 16),\r\n-          ElevatedButton(\r\n-            onPressed: () {\r\n-              widget\r\n-                  .onSave(modifiedNotifications); // Pass updated list to onSave\r\n-              Navigator.pop(context);\r\n-            },\r\n-            child: const Text('Salvează modificările'),\r\n-          ),\r\n-        ],\r\n+                const SizedBox(height: 16),\r\n+                ElevatedButton(\r\n+                  onPressed: () {\r\n+                    onSave(context.read<BottomSheetDetailsCubit>().state.notifications);\r\n+                    Navigator.pop(context);\r\n+                  },\r\n+                  child: const Text('Salvează modificările'),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+          );\r\n+        },\r\n       ),\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1730898569508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,25 +99,19 @@\n                               const Text('Dată notificare:'),\r\n                               const SizedBox(width: 8),\r\n                               TextButton(\r\n                                 onPressed: () async {\r\n-                                  DateTime? pickedDate = await showDatePicker(\r\n-                                    context: context,\r\n-                                    initialDate: notification.date,\r\n-                                    firstDate: DateTime.now(),\r\n-                                    lastDate: DateTime.now().add(\r\n-                                      const Duration(days: 365),\r\n-                                    ),\r\n-                                  );\r\n-                                  if (pickedDate != null) {\r\n-                                    context\r\n-                                        .read<BottomSheetDetailsCubit>()\r\n-                                        .updateNotification(\r\n-                                          index,\r\n-                                          notification.copyWith(\r\n-                                              date: pickedDate),\r\n-                                        );\r\n-                                  }\r\n+                                  DateTime now = DateTime.now();\r\n+DateTime lastDate = now.add(const Duration(days: 365));\r\n+DateTime initialDate = notification.date.isAfter(lastDate) ? lastDate : notification.date;\r\n+\r\n+DateTime? pickedDate = await showDatePicker(\r\n+  context: context,\r\n+  initialDate: initialDate,\r\n+  firstDate: now,\r\n+  lastDate: lastDate,\r\n+);\r\n+\r\n                                 },\r\n                                 child: Text(\r\n                                   '${notification.date.day}-${notification.date.month}-${notification.date.year}',\r\n                                 ),\r\n"
                },
                {
                    "date": 1730898578859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,21 +100,27 @@\n                               const SizedBox(width: 8),\r\n                               TextButton(\r\n                                 onPressed: () async {\r\n                                   DateTime now = DateTime.now();\r\n-                                  DateTime lastDate =\r\n-                                      now.add(const Duration(days: 365));\r\n-                                  DateTime initialDate =\r\n-                                      notification.date.isAfter(lastDate)\r\n-                                          ? lastDate\r\n-                                          : notification.date;\r\n+DateTime lastDate = now.add(const Duration(days: 365));\r\n+DateTime initialDate = notification.date.isAfter(lastDate) ? lastDate : notification.date;\r\n \r\n-                                  DateTime? pickedDate = await showDatePicker(\r\n-                                    context: context,\r\n-                                    initialDate: initialDate,\r\n-                                    firstDate: now,\r\n-                                    lastDate: lastDate,\r\n-                                  );\r\n+DateTime? pickedDate = await showDatePicker(\r\n+  context: context,\r\n+  initialDate: initialDate,\r\n+  firstDate: now,\r\n+  lastDate: lastDate,\r\n+);\r\n+\r\n+                                  if (pickedDate != null) {\r\n+                                    context\r\n+                                        .read<BottomSheetDetailsCubit>()\r\n+                                        .updateNotification(\r\n+                                          index,\r\n+                                          notification.copyWith(\r\n+                                              date: pickedDate),\r\n+                                        );\r\n+                                  }\r\n                                 },\r\n                                 child: Text(\r\n                                   '${notification.date.day}-${notification.date.month}-${notification.date.year}',\r\n                                 ),\r\n"
                }
            ],
            "date": 1730896834484,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:auto_asig/core/models/notification_model.dart';\r\n\r\nclass NotificationDetailsBottomSheet extends StatefulWidget {\r\n  final String title;\r\n  final List<NotificationModel> notifications;\r\n  final void Function(List<NotificationModel>) onSave;\r\n\r\n  const NotificationDetailsBottomSheet({\r\n    super.key,\r\n    required this.title,\r\n    required this.notifications,\r\n    required this.onSave,\r\n  });\r\n\r\n  @override\r\n  _NotificationDetailsBottomSheetState createState() =>\r\n      _NotificationDetailsBottomSheetState();\r\n}\r\n\r\nclass _NotificationDetailsBottomSheetState\r\n    extends State<NotificationDetailsBottomSheet> {\r\n  late List<NotificationModel> modifiedNotifications;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    modifiedNotifications = List.from(widget.notifications);\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      padding: const EdgeInsets.all(16.0),\r\n      decoration: const BoxDecoration(\r\n        color: Colors.white,\r\n        borderRadius: BorderRadius.only(\r\n          topLeft: Radius.circular(20),\r\n          topRight: Radius.circular(20),\r\n        ),\r\n      ),\r\n      child: Column(\r\n        mainAxisSize: MainAxisSize.min,\r\n        children: [\r\n          Text(\r\n            'Setări notificări pentru ${widget.title}',\r\n            style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 18),\r\n          ),\r\n          const SizedBox(height: 16),\r\n          ListView.builder(\r\n            shrinkWrap: true,\r\n            itemCount: modifiedNotifications.length,\r\n            itemBuilder: (context, index) {\r\n              final notification = modifiedNotifications[index];\r\n              return ListTile(\r\n                title: Text(\r\n                  'Notificare ${index + 1}',\r\n                  style: const TextStyle(fontWeight: FontWeight.bold),\r\n                ),\r\n                subtitle: Column(\r\n                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                  children: [\r\n                    Row(\r\n                      children: [\r\n                        Checkbox(\r\n                          value: notification.sms,\r\n                          onChanged: (value) {\r\n                            setState(() {\r\n                              modifiedNotifications[index] = notification.copyWith(sms: value);\r\n                            });\r\n                          },\r\n                        ),\r\n                        const Text('SMS'),\r\n                        const SizedBox(width: 16),\r\n                        Checkbox(\r\n                          value: notification.email,\r\n                          onChanged: (value) {\r\n                            setState(() {\r\n                              modifiedNotifications[index] = notification.copyWith(email: value);\r\n                            });\r\n                          },\r\n                        ),\r\n                        const Text('Email'),\r\n                        const SizedBox(width: 16),\r\n                        Checkbox(\r\n                          value: notification.push,\r\n                          onChanged: (value) {\r\n                            setState(() {\r\n                              modifiedNotifications[index] = notification.copyWith(push: value);\r\n                            });\r\n                          },\r\n                        ),\r\n                        const Text('Push'),\r\n                      ],\r\n                    ),\r\n                    Row(\r\n                      children: [\r\n                        const Text('Dată notificare:'),\r\n                        const SizedBox(width: 8),\r\n                        TextButton(\r\n                          onPressed: () async {\r\n                            DateTime? pickedDate = await showDatePicker(\r\n                              context: context,\r\n                              initialDate: notification.date,\r\n                              firstDate: DateTime.now(),\r\n                              lastDate: DateTime.now().add(\r\n                                const Duration(days: 365),\r\n                              ),\r\n                            );\r\n                            if (pickedDate != null) {\r\n                              setState(() {\r\n                                modifiedNotifications[index] = notification.copyWith(date: pickedDate);\r\n                              });\r\n                            }\r\n                          },\r\n                          child: Text(\r\n                            '${notification.date.day}-${notification.date.month}-${notification.date.year}',\r\n                          ),\r\n                        ),\r\n                      ],\r\n                    ),\r\n                  ],\r\n                ),\r\n              );\r\n            },\r\n          ),\r\n          const SizedBox(height: 16),\r\n          ElevatedButton(\r\n            onPressed: () {\r\n              widget.onSave(modifiedNotifications); // Pass updated list to onSave\r\n              Navigator.pop(context);\r\n            },\r\n            child: const Text('Salvează modificările'),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}