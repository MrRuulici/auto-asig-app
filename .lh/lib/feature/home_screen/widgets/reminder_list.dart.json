{
    "sourceFile": "lib/feature/home_screen/widgets/reminder_list.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1730551108771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730551592211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,11 @@\n   @override\r\n   Widget build(BuildContext context) {\r\n     return BlocBuilder<ReminderCubit, ReminderState>(\r\n       builder: (context, state) {\r\n-        if (state is ReminderLoading) {\r\n+        if (state is ReminderInitial) {\r\n+          return const Center(child: Text('Initializing...')); // Handle initial state\r\n+        } else if (state is ReminderLoading) {\r\n           return const Center(child: CircularProgressIndicator());\r\n         } else if (state is ReminderError) {\r\n           return Center(child: Text(state.message));\r\n         } else if (state is ReminderLoaded) {\r\n@@ -28,10 +30,9 @@\n             );\r\n           }\r\n \r\n           // Sort the reminders by expiration date\r\n-          reminders\r\n-              .sort((a, b) => a.expirationDate.compareTo(b.expirationDate));\r\n+          reminders.sort((a, b) => a.expirationDate.compareTo(b.expirationDate));\r\n \r\n           return ListView.builder(\r\n             itemCount: reminders.length,\r\n             itemBuilder: (context, index) {\r\n"
                },
                {
                    "date": 1730551616818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \r\n class ReminderList extends StatelessWidget {\r\n   final HomeScreenTabState selectedTab;\r\n \r\n-  const ReminderList({required this.selectedTab, Key? key}) : super(key: key);\r\n+  const ReminderList({required this.selectedTab, super.key});\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return BlocBuilder<ReminderCubit, ReminderState>(\r\n"
                }
            ],
            "date": 1730551108771,
            "name": "Commit-0",
            "content": "import 'package:auto_asig/core/data/constants.dart';\r\nimport 'package:auto_asig/feature/home_screen/cubit/reminder_cubit.dart';\r\nimport 'package:auto_asig/feature/home_screen/cubit/reminder_state.dart';\r\nimport 'package:auto_asig/feature/home_screen/widgets/notif_item.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport 'package:intl/intl.dart';\r\n\r\n\r\nclass ReminderList extends StatelessWidget {\r\n  final HomeScreenTabState selectedTab;\r\n\r\n  const ReminderList({required this.selectedTab, Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return BlocBuilder<ReminderCubit, ReminderState>(\r\n      builder: (context, state) {\r\n        if (state is ReminderLoading) {\r\n          return const Center(child: CircularProgressIndicator());\r\n        } else if (state is ReminderError) {\r\n          return Center(child: Text(state.message));\r\n        } else if (state is ReminderLoaded) {\r\n          final reminders = state.reminders;\r\n\r\n          if (reminders.isEmpty) {\r\n            return const Center(\r\n              child: Text('Nu există notificări.'),\r\n            );\r\n          }\r\n\r\n          // Sort the reminders by expiration date\r\n          reminders.sort((a, b) => a.expirationDate.compareTo(b.expirationDate));\r\n\r\n          return ListView.builder(\r\n            itemCount: reminders.length,\r\n            itemBuilder: (context, index) {\r\n              final reminder = reminders[index];\r\n\r\n              final DateFormat dateFormatter = DateFormat('dd.MM.yyyy');\r\n              final DateFormat timeFormatter = DateFormat('HH:mm');\r\n\r\n              final remainingTime = reminder.expirationDate.difference(DateTime.now()).inDays;\r\n              bool isExpired = remainingTime < 0;\r\n              final days = remainingTime.abs();\r\n\r\n              return NotifItem(\r\n                reminder: reminder,\r\n                isExpired: isExpired,\r\n                days: days,\r\n                dateFormatter: dateFormatter,\r\n                timeFormatter: timeFormatter,\r\n                remainingTime: remainingTime,\r\n              );\r\n            },\r\n          );\r\n        } else {\r\n          return const Center(child: Text('Unknown state.'));\r\n        }\r\n      },\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}